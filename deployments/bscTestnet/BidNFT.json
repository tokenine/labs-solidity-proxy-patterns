{
  "address": "0x985cf2206140B749dBd737A8aB2FA5fbb483c169",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "AddSupportedQuoteToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteTokenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Ask",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteTokenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CancelBidToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CancelSellToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "FeeAddressTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "RemoveSupportedQuoteToken",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endtime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SetEndTime",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFeePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SetFeePercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldFeePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newFeePercent",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "SetFeeToMinterPercent",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "seller",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteTokenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "feeToMinter",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Trade",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "quoteTokenAddr",
          "type": "address"
        }
      ],
      "name": "addSupportedQuoteToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "bidToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "buyToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "buyTokenTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelBidToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "cancelSellToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feePercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeToMinterPercent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAsks",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct AskHelper.AskEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getAsksByPage",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct AskHelper.AskEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "page",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "size",
          "type": "uint256"
        }
      ],
      "name": "getAsksByPageDesc",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct AskHelper.AskEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAsksByUser",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct AskHelper.AskEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getAsksByUserDesc",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct AskHelper.AskEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAsksDesc",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct AskHelper.AskEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAsksLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "bidder",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct BidHelper.BidEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getBidsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        }
      ],
      "name": "getEndTime",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedQuoteTokens",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "_tokens",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "user",
          "type": "address"
        }
      ],
      "name": "getUserBids",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "tokenId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "price",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "quoteTokenAddr",
              "type": "address"
            }
          ],
          "internalType": "struct BidHelper.UserBidEntry[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_nftAddress",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "__quoteErc20Tokens",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_feeToMinterPercent",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenAddr",
          "type": "address"
        }
      ],
      "name": "isSupportedQuoteToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nft",
      "outputs": [
        {
          "internalType": "contract IArtworkNFT",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteTokenAddr",
          "type": "address"
        }
      ],
      "name": "readyToSellToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteTokenAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "readyToSellTokenTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "quoteTokenAddr",
          "type": "address"
        }
      ],
      "name": "removeSupportedQuoteToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        }
      ],
      "name": "sellTokenTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_quoteTokenAddr",
          "type": "address"
        }
      ],
      "name": "setCurrentPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_endTime",
          "type": "uint256"
        }
      ],
      "name": "setEndTime",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feePercent",
          "type": "uint256"
        }
      ],
      "name": "setFeePercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_feeToMinterPercent",
          "type": "uint256"
        }
      ],
      "name": "setFeeToMinterPercent",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_feeAddr",
          "type": "address"
        }
      ],
      "name": "transferFeeAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_price",
          "type": "uint256"
        }
      ],
      "name": "updateBidPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xbd09b4d77c75cdf7dc76f4ccbeda69fdb9b4a942c3af02d6eb5988b7ff73b84d",
  "receipt": {
    "to": null,
    "from": "0xd0BE34550AC47e616B7220564605BA00912A5FeF",
    "contractAddress": "0x985cf2206140B749dBd737A8aB2FA5fbb483c169",
    "transactionIndex": 0,
    "gasUsed": "3337961",
    "logsBloom": "0x
    "blockHash": "0xc62327b9063e800feef5293893b8f819a63d29cfc5c328f23988cd83ebd23bad",
    "transactionHash": "0xbd09b4d77c75cdf7dc76f4ccbeda69fdb9b4a942c3af02d6eb5988b7ff73b84d",
    "logs": [],
    "blockNumber": 9785608,
    "cumulativeGasUsed": "3337961",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "da988d3e82b882c8d27feceedf97cc0e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"AddSupportedQuoteToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Ask\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelBidToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelSellToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"FeeAddressTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"RemoveSupportedQuoteToken\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endtime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetEndTime\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetFeePercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newFeePercent\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"SetFeeToMinterPercent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"seller\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"feeToMinter\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Trade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"name\":\"addSupportedQuoteToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"bidToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"buyToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"buyTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelBidToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"cancelSellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feePercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeToMinterPercent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsks\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct AskHelper.AskEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getAsksByPage\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct AskHelper.AskEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"page\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"size\",\"type\":\"uint256\"}],\"name\":\"getAsksByPageDesc\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct AskHelper.AskEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAsksByUser\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct AskHelper.AskEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getAsksByUserDesc\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct AskHelper.AskEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsksDesc\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct AskHelper.AskEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAsksLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBids\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct BidHelper.BidEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getBidsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"}],\"name\":\"getEndTime\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedQuoteTokens\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"_tokens\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"}],\"name\":\"getUserBids\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"internalType\":\"struct BidHelper.UserBidEntry[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_nftAddress\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"__quoteErc20Tokens\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_feeToMinterPercent\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenAddr\",\"type\":\"address\"}],\"name\":\"isSupportedQuoteToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nft\",\"outputs\":[{\"internalType\":\"contract IArtworkNFT\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteTokenAddr\",\"type\":\"address\"}],\"name\":\"readyToSellToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteTokenAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"readyToSellTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"}],\"name\":\"removeSupportedQuoteToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"}],\"name\":\"sellTokenTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_quoteTokenAddr\",\"type\":\"address\"}],\"name\":\"setCurrentPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_endTime\",\"type\":\"uint256\"}],\"name\":\"setEndTime\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feePercent\",\"type\":\"uint256\"}],\"name\":\"setFeePercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_feeToMinterPercent\",\"type\":\"uint256\"}],\"name\":\"setFeeToMinterPercent\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_feeAddr\",\"type\":\"address\"}],\"name\":\"transferFeeAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_price\",\"type\":\"uint256\"}],\"name\":\"updateBidPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}.     * Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/BidNFTV2.sol\":\"BidNFTV2\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/BidNFTV2.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\npragma experimental ABIEncoderV2;\\n\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/Pausable.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/ERC721Holder.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n// import \\\"./interfaces/IBidNFT.sol\\\";\\n// import \\\"./interfaces/IArtworkNFT.sol\\\";\\n// import \\\"./libraries/EnumerableMap.sol\\\";\\n// import \\\"./libraries/EnumerableSet.sol\\\";\\n// import \\\"./libraries/AskHelper.sol\\\";\\n// import \\\"./libraries/BidHelper.sol\\\";\\n// import \\\"./libraries/TradeHelper.sol\\\";\\n\\n\\nimport \\\"./openzeppelin/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./openzeppelin/access/OwnableUpgradeable.sol\\\";\\nimport \\\"./openzeppelin/utils/PausableUpgradeable.sol\\\";\\nimport \\\"./openzeppelin/token/ERC721/ERC721HolderUpgradeable.sol\\\";\\nimport \\\"./openzeppelin/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"./openzeppelin/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"./openzeppelin/utils/AddressUpgradeable.sol\\\";\\nimport \\\"./interfaces/IBidNFT.sol\\\";\\nimport \\\"./interfaces/IArtworkNFT.sol\\\";\\n// import \\\"./openzeppelin/utils/EnumerableMapUpgradeable.sol\\\";\\n// import \\\"./openzeppelin/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./libraries/EnumerableMap.sol\\\";\\nimport \\\"./libraries/EnumerableSet.sol\\\";\\nimport \\\"./libraries/AskHelper.sol\\\";\\nimport \\\"./libraries/BidHelper.sol\\\";\\nimport \\\"./libraries/TradeHelper.sol\\\";\\n\\ncontract BidNFTV2 is IBidNFT, ERC721HolderUpgradeable, OwnableUpgradeable, PausableUpgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n    using AddressUpgradeable for address;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using AskHelper for EnumerableMap.UintToUintMap;\\n\\n    IArtworkNFT public nft;\\n\\n    address public feeAddr;\\n    uint256 public feePercent;\\n\\n    uint256 public feeToMinterPercent;\\n\\n    EnumerableMap.UintToUintMap private _asksMap;\\n\\n    mapping(uint256 => address) private _asksQuoteTokens;\\n\\n    mapping(uint256 => address) private _tokenSellers;\\n    mapping(address => EnumerableSet.UintSet) private _userSellingTokens;\\n\\n    mapping(uint256 => BidHelper.BidEntry[]) private _tokenBids;\\n    mapping(address => EnumerableMap.UintToUintMap) private _userBids;\\n\\n    EnumerableSet.AddressSet private _quoteErc20Tokens;\\n\\n    EnumerableMap.UintToUintMap private _endTimeMap;\\n\\n    event Bid(\\n        address indexed bidder,\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address quoteTokenAddr,\\n        uint256 timestamp\\n    );\\n\\n    event CancelBidToken(address indexed bidder, uint256 indexed tokenId, uint256 timestamp);\\n\\n    event Trade(\\n        address indexed seller,\\n        address indexed buyer,\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address quoteTokenAddr,\\n        uint256 fee,\\n        uint256 feeToMinter,\\n        uint256 timestamp\\n    );\\n    event Ask(\\n        address indexed seller,\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address quoteTokenAddr,\\n        uint256 timestamp\\n    );\\n    event CancelSellToken(address indexed seller, uint256 indexed tokenId, uint256 timestamp);\\n    event FeeAddressTransferred(\\n        address indexed previousOwner,\\n        address indexed newOwner,\\n        uint256 timestamp\\n    );\\n    event SetFeePercent(\\n        address indexed seller,\\n        uint256 oldFeePercent,\\n        uint256 newFeePercent,\\n        uint256 timestamp\\n    );\\n    event SetFeeToMinterPercent(\\n        address indexed seller,\\n        uint256 oldFeePercent,\\n        uint256 newFeePercent,\\n        uint256 timestamp\\n    );\\n    event AddSupportedQuoteToken(address indexed seller, address quoteToken, uint256 timestamp);\\n    event RemoveSupportedQuoteToken(address indexed seller, address quoteToken, uint256 timestamp);\\n\\n    event SetEndTime(\\n        address indexed seller,\\n        uint256 indexed tokenId,\\n        uint256 endtime,\\n        uint256 timestamp\\n    );\\n\\n    modifier onlySupportTokens(address tokenAddr) {\\n        require(_quoteErc20Tokens.contains(tokenAddr));\\n        _;\\n    }\\n\\n    // constructor(\\n    //     address _nftAddress,\\n    //     address[] memory __quoteErc20Tokens,\\n    //     address _feeAddr,\\n    //     uint256 _feePercent,\\n    //     uint256 _feeToMinterPercent\\n    // ) public {\\n    //     require(_nftAddress != address(0) && _nftAddress != address(this));\\n\\n    //     for (uint256 i = 0; i < __quoteErc20Tokens.length; i++) {\\n    //         require(\\n    //             __quoteErc20Tokens[i] != address(0) &&\\n    //                 __quoteErc20Tokens[i] != address(this)\\n    //         );\\n    //         if (!_quoteErc20Tokens.contains(__quoteErc20Tokens[i])) {\\n    //             _quoteErc20Tokens.add(__quoteErc20Tokens[i]);\\n    //         }\\n    //     }\\n\\n    //     nft = IArtworkNFT(_nftAddress);\\n    //     feeAddr = _feeAddr;\\n    //     feePercent = _feePercent;\\n    //     feeToMinterPercent = _feeToMinterPercent;\\n    //     emit FeeAddressTransferred(address(0), feeAddr);\\n    //     emit SetFeePercent(_msgSender(), 0, feePercent);\\n    //     emit SetFeeToMinterPercent(_msgSender(), 0, feeToMinterPercent);\\n    // }\\n\\n    function initialize(\\n        address _nftAddress,\\n        address[] memory __quoteErc20Tokens,\\n        address _feeAddr,\\n        uint256 _feePercent,\\n        uint256 _feeToMinterPercent\\n    ) initializer public {\\n        __ERC721Holder_init();\\n        __Ownable_init();\\n        __Pausable_init();\\n\\n        require(_nftAddress != address(0) && _nftAddress != address(this));\\n\\n        for (uint256 i = 0; i < __quoteErc20Tokens.length; i++) {\\n            require(\\n                __quoteErc20Tokens[i] != address(0) &&\\n                    __quoteErc20Tokens[i] != address(this)\\n            );\\n            if (!_quoteErc20Tokens.contains(__quoteErc20Tokens[i])) {\\n                _quoteErc20Tokens.add(__quoteErc20Tokens[i]);\\n            }\\n        }\\n\\n        nft = IArtworkNFT(_nftAddress);\\n        feeAddr = _feeAddr;\\n        feePercent = _feePercent;\\n        feeToMinterPercent = _feeToMinterPercent;\\n        emit FeeAddressTransferred(address(0), feeAddr, now);\\n        emit SetFeePercent(_msgSender(), 0, feePercent, now);\\n        emit SetFeeToMinterPercent(_msgSender(), 0, feeToMinterPercent, now);\\n    }\\n\\n    function buyToken(uint256 _tokenId) external override whenNotPaused {\\n        buyTokenTo(_tokenId, _msgSender());\\n    }\\n\\n    function setCurrentPrice(\\n        uint256 _tokenId,\\n        uint256 _price,\\n        address _quoteTokenAddr\\n    ) external override whenNotPaused onlySupportTokens(_quoteTokenAddr) {\\n        require(\\n            _userSellingTokens[_msgSender()].contains(_tokenId),\\n            \\\"Only Seller can update price\\\"\\n        );\\n        require(_price != 0, \\\"Price must be granter than zero\\\");\\n        _asksMap.set(_tokenId, _price);\\n        _asksQuoteTokens[_tokenId] = _quoteTokenAddr;\\n        emit Ask(_msgSender(), _tokenId, _price, _quoteTokenAddr, now);\\n    }\\n\\n    function setEndTime(\\n        uint256 _tokenId,\\n        uint256 _endTime\\n    ) external  whenNotPaused {\\n        require(\\n            _userSellingTokens[_msgSender()].contains(_tokenId),\\n            \\\"Only Seller can set endtime\\\"\\n        );\\n        require(_endTime > now, \\\"Endtime must be granter than current time\\\");\\n        _endTimeMap.set(_tokenId, _endTime);\\n        emit SetEndTime(_msgSender(), _tokenId, _endTime, now);\\n    }\\n\\n    function readyToSellToken(\\n        uint256 _tokenId,\\n        uint256 _price,\\n        address _quoteTokenAddr\\n    ) external override whenNotPaused {\\n        readyToSellTokenTo(\\n            _tokenId,\\n            _price,\\n            _quoteTokenAddr,\\n            address(_msgSender())\\n        );\\n    }\\n\\n    function readyToSellTokenTo(\\n        uint256 _tokenId,\\n        uint256 _price,\\n        address _quoteTokenAddr,\\n        address _to\\n    ) public override whenNotPaused onlySupportTokens(_quoteTokenAddr) {\\n        require(\\n            _msgSender() == nft.ownerOf(_tokenId),\\n            \\\"Only Token Owner can sell token\\\"\\n        );\\n        require(_price != 0, \\\"Price must be granter than zero\\\");\\n        nft.safeTransferFrom(address(_msgSender()), address(this), _tokenId);\\n        _asksMap.set(_tokenId, _price);\\n        _asksQuoteTokens[_tokenId] = _quoteTokenAddr;\\n        _tokenSellers[_tokenId] = _to;\\n        _userSellingTokens[_to].add(_tokenId);\\n        emit Ask(_to, _tokenId, _price, _quoteTokenAddr, now);\\n    }\\n\\n    function cancelSellToken(uint256 _tokenId) external override whenNotPaused {\\n        require(\\n            _userSellingTokens[_msgSender()].contains(_tokenId),\\n            \\\"Only Seller can cancel sell token\\\"\\n        );\\n        nft.safeTransferFrom(address(this), _msgSender(), _tokenId);\\n        _asksMap.remove(_tokenId);\\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\\n        delete _tokenSellers[_tokenId];\\n        emit CancelSellToken(_msgSender(), _tokenId, now);\\n    }\\n\\n    function bidToken(uint256 _tokenId, uint256 _price)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        TradeHelper.bidToken(\\n            _msgSender(),\\n            address(this),\\n            _asksMap,\\n            _endTimeMap,\\n            _userBids,\\n            _tokenBids,\\n            _asksQuoteTokens,\\n            _tokenSellers,\\n            _tokenId,\\n            _price\\n        );\\n    }\\n\\n    function updateBidPrice(uint256 _tokenId, uint256 _price)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        TradeHelper.updateBidPrice(\\n            _msgSender(),\\n            _endTimeMap,\\n            _tokenId,\\n            _price,\\n            _userBids,\\n            _tokenBids\\n        );\\n    }\\n\\n    function buyTokenTo(uint256 _tokenId, address _to)\\n        public\\n        override\\n        whenNotPaused\\n    {\\n        require(\\n            _msgSender() != address(0) && _msgSender() != address(this),\\n            \\\"Wrong msg sender\\\"\\n        );\\n        require(_asksMap.contains(_tokenId), \\\"Token not in sell book\\\");\\n        require(\\n            !_userBids[_msgSender()].contains(_tokenId),\\n            \\\"You must cancel your bid first\\\"\\n        );\\n        require(_endTimeMap.get(_tokenId) > now, \\\"The end time have passed\\\");\\n        \\n        nft.safeTransferFrom(address(this), _to, _tokenId);\\n        uint256 price = _asksMap.get(_tokenId);\\n        uint256 feeAmount = price.mul(feePercent).div(100*10**18);\\n        uint256 feeToMinterAmount = price.mul(feeToMinterPercent).div(100*10**18);\\n\\n        TradeHelper.transferBuyMoney(\\n            _msgSender(),\\n            nft.minterOf(_tokenId),\\n            _tokenSellers[_tokenId],\\n            _asksMap.get(_tokenId),\\n            feeAmount,\\n            feeToMinterAmount,\\n            feeAddr,\\n            _asksQuoteTokens[_tokenId]\\n        );\\n\\n        _asksMap.remove(_tokenId);\\n        delete _asksQuoteTokens[_tokenId];\\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\\n        emit Trade(\\n            _tokenSellers[_tokenId],\\n            _to,\\n            _tokenId,\\n            price,\\n            _asksQuoteTokens[_tokenId],\\n            feeAmount,\\n            feeToMinterPercent,\\n         now\\n        );\\n        delete _tokenSellers[_tokenId];\\n    }\\n\\n    function sellTokenTo(uint256 _tokenId, address _to)\\n        external\\n        override\\n        whenNotPaused\\n    {\\n        require(_asksMap.contains(_tokenId), \\\"Token not in sell book\\\");\\n        require(\\n            _tokenSellers[_tokenId] == address(_msgSender()),\\n            \\\"Only owner can sell token\\\"\\n        );\\n        // find  bid and the index\\n        (BidHelper.BidEntry memory bidEntry, uint256 _index) =\\n            BidHelper.getBidByTokenIdAndAddress(_tokenBids, _tokenId, _to);\\n        require(bidEntry.price != 0, \\\"Bidder does not exist\\\");\\n\\n        // transfer token to bidder\\n        nft.safeTransferFrom(address(this), _to, _tokenId);\\n\\n        uint256 feeAmount = bidEntry.price.mul(feePercent).div(100*10**18);\\n        uint256 feeToMinterAmount =\\n            bidEntry.price.mul(feeToMinterPercent).div(100*10**18);\\n        TradeHelper.trasnferSellMoney(\\n            nft.minterOf(_tokenId),\\n            _tokenSellers[_tokenId],\\n            bidEntry.price,\\n            feeAmount,\\n            feeToMinterAmount,\\n            feeAddr,\\n            _asksQuoteTokens[_tokenId]\\n        );\\n\\n        _asksMap.remove(_tokenId);\\n        _userSellingTokens[_tokenSellers[_tokenId]].remove(_tokenId);\\n        TradeHelper.delBidByTokenIdAndIndex(\\n            _tokenId,\\n            _index,\\n            _tokenBids,\\n            _userBids\\n        );\\n        emit Trade(\\n            _tokenSellers[_tokenId],\\n            _to,\\n            _tokenId,\\n            bidEntry.price,\\n            bidEntry.quoteTokenAddr,\\n            feeAmount,\\n            feeToMinterAmount,\\n         now\\n        );\\n        delete _tokenSellers[_tokenId];\\n    }\\n\\n    function cancelBidToken(uint256 _tokenId) external override whenNotPaused {\\n        TradeHelper.cancelBidToken(\\n            _msgSender(),\\n            _tokenId,\\n            _tokenBids,\\n            _userBids\\n        );\\n    }\\n\\n    function getAsksLength() external view returns (uint256) {\\n        return _asksMap.length();\\n    }\\n\\n    function getAsks() external view returns (AskHelper.AskEntry[] memory) {\\n        return _asksMap.getAsks(_asksQuoteTokens);\\n    }\\n\\n    function getAsksDesc() external view returns (AskHelper.AskEntry[] memory) {\\n        return _asksMap.getAsksDesc(_asksQuoteTokens);\\n    }\\n\\n    function getAsksByPage(uint256 page, uint256 size)\\n        external\\n        view\\n        returns (AskHelper.AskEntry[] memory)\\n    {\\n        return _asksMap.getAsksByPage(_asksQuoteTokens, page, size);\\n    }\\n\\n    function getAsksByPageDesc(uint256 page, uint256 size)\\n        external\\n        view\\n        returns (AskHelper.AskEntry[] memory)\\n    {\\n        return _asksMap.getAsksByPageDesc(_asksQuoteTokens, page, size);\\n    }\\n\\n    function getAsksByUser(address user)\\n        external\\n        view\\n        returns (AskHelper.AskEntry[] memory)\\n    {\\n        return\\n            _asksMap.getAsksByUser(_asksQuoteTokens, _userSellingTokens, user);\\n    }\\n\\n    function getAsksByUserDesc(address user)\\n        external\\n        view\\n        returns (AskHelper.AskEntry[] memory)\\n    {\\n        return\\n            _asksMap.getAsksByUserDesc(\\n                _asksQuoteTokens,\\n                _userSellingTokens,\\n                user\\n            );\\n    }\\n\\n    function getBidsLength(uint256 _tokenId) external view returns (uint256) {\\n        return _tokenBids[_tokenId].length;\\n    }\\n\\n    function getEndTime (uint256 _tokenId) external view returns (uint256) {\\n        return _endTimeMap.get(_tokenId);\\n    }\\n\\n    function getBids(uint256 _tokenId)\\n        external\\n        view\\n        returns (BidHelper.BidEntry[] memory)\\n    {\\n        return _tokenBids[_tokenId];\\n    }\\n\\n    function getUserBids(address user)\\n        external\\n        view\\n        returns (BidHelper.UserBidEntry[] memory)\\n    {\\n        return BidHelper.getUserBids(_userBids, _asksQuoteTokens, user);\\n    }\\n\\n    function pause() external onlyOwner whenNotPaused {\\n        _pause();\\n    }\\n\\n    function unpause() external onlyOwner whenPaused {\\n        _unpause();\\n    }\\n\\n    function getSupportedQuoteTokens()\\n        external\\n        view\\n        returns (address[] memory _tokens)\\n    {\\n        _tokens = new address[](_quoteErc20Tokens.length());\\n        for(uint256 i=0; i<_quoteErc20Tokens.length(); i++) {\\n            _tokens[i] = _quoteErc20Tokens.at(i);\\n        }\\n    }\\n\\n    function addSupportedQuoteToken(address quoteTokenAddr) external onlyOwner {\\n        require(quoteTokenAddr != address(0));\\n        require(!_quoteErc20Tokens.contains(quoteTokenAddr), \\\"already exists\\\");\\n        _quoteErc20Tokens.add(quoteTokenAddr);\\n        emit AddSupportedQuoteToken(_msgSender(), quoteTokenAddr, now);\\n    }\\n\\n    function removeSupportedQuoteToken(address quoteTokenAddr)\\n        external\\n        onlyOwner\\n        returns (bool)\\n    {\\n        require(_quoteErc20Tokens.contains(quoteTokenAddr), \\\"not found\\\");\\n        _quoteErc20Tokens.remove(quoteTokenAddr);\\n        emit RemoveSupportedQuoteToken(_msgSender(), quoteTokenAddr, now);\\n    }\\n\\n    function transferFeeAddress(address _feeAddr) external {\\n        require(_msgSender() == feeAddr, \\\"FORBIDDEN\\\");\\n        feeAddr = _feeAddr;\\n        emit FeeAddressTransferred(_msgSender(), feeAddr, now);\\n    }\\n\\n    function setFeePercent(uint256 _feePercent) external onlyOwner {\\n        require(feePercent != _feePercent, \\\"No need to update\\\");\\n        emit SetFeePercent(_msgSender(), feePercent, _feePercent, now);\\n        feePercent = _feePercent;\\n    }\\n\\n    function setFeeToMinterPercent(uint256 _feeToMinterPercent)\\n        external\\n        onlyOwner\\n    {\\n        require(feeToMinterPercent != _feeToMinterPercent, \\\"No need to update\\\");\\n        emit SetFeeToMinterPercent(\\n            _msgSender(),\\n            feeToMinterPercent,\\n            _feeToMinterPercent,\\n         now\\n        );\\n        feeToMinterPercent = _feeToMinterPercent;\\n    }\\n\\n    function isSupportedQuoteToken(address tokenAddr)\\n        external\\n        view\\n        returns (bool)\\n    {\\n        return _quoteErc20Tokens.contains(tokenAddr);\\n    }\\n}\",\"keccak256\":\"0xf8d2a56bd83283424023ed3daade199a8cb7ea303e2839d59dd32927972bea0c\"},\"contracts/interfaces/IArtworkNFT.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport \\\"../openzeppelin/token/ERC721/IERC721Upgradeable.sol\\\";\\n\\n\\ninterface IArtworkNFT is IERC721Upgradeable {\\n    function minterOf(uint256 _tokenId) external view returns (address);\\n}\",\"keccak256\":\"0x4863a8cf7a762cec037f732093286d070cfdd94d38d71eb6bdada77d19966758\"},\"contracts/interfaces/IBidNFT.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\ninterface IBidNFT {\\n    function buyToken(uint256 _tokenId) external;\\n\\n    function buyTokenTo(uint256 _tokenId, address _to) external;\\n\\n    function setCurrentPrice(\\n        uint256 _tokenId,\\n        uint256 _price,\\n        address _quoteTokenAddr\\n    ) external;\\n\\n    function readyToSellToken(\\n        uint256 _tokenId,\\n        uint256 _price,\\n        address _quoteTokenAddr\\n    ) external;\\n\\n    function readyToSellTokenTo(\\n        uint256 _tokenId,\\n        uint256 _price,\\n        address _quoteTokenAddr,\\n        address _to\\n    ) external;\\n\\n    function cancelSellToken(uint256 _tokenId) external;\\n\\n    function bidToken(uint256 _tokenId, uint256 _price) external;\\n\\n    function updateBidPrice(uint256 _tokenId, uint256 _price) external;\\n\\n    function sellTokenTo(uint256 _tokenId, address _to) external;\\n\\n    function cancelBidToken(uint256 _tokenId) external;\\n}\",\"keccak256\":\"0xccd57d5e78e9c0b6f961b8e9f2d8592295d51d832c80e9670c61824574b27f62\"},\"contracts/libraries/AskHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\npragma experimental ABIEncoderV2;\\n\\n// import \\\"@openzeppelin/contracts/math/Math.sol\\\";\\n// import \\\"./EnumerableMap.sol\\\";\\n// import \\\"./EnumerableSet.sol\\\";\\n\\nimport \\\"../openzeppelin/math/MathUpgradeable.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n\\n\\nlibrary AskHelper {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n\\n    struct AskEntry {\\n        uint256 tokenId;\\n        uint256 price;\\n        address quoteTokenAddr;\\n    }\\n\\n    function getAsks(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks = new AskEntry[](_asksMap.length());\\n        for (uint256 i = 0; i < _asksMap.length(); ++i) {\\n            (uint256 tokenId, uint256 price) = _asksMap.at(i);\\n            asks[i] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n            });\\n        }\\n        return asks;\\n    }\\n\\n    function getAsksDesc(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks = new AskEntry[](_asksMap.length());\\n        if (_asksMap.length() > 0) {\\n            for (uint256 i = _asksMap.length() - 1; i > 0; --i) {\\n                (uint256 tokenId, uint256 price) = _asksMap.at(i);\\n                asks[_asksMap.length() - 1 - i] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n            }\\n            (uint256 tokenId, uint256 price) = _asksMap.at(0);\\n            asks[_asksMap.length() - 1] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n            });\\n        }\\n        return asks;\\n    }\\n\\n    function getAsksByPage(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        uint256 page,\\n        uint256 size\\n    ) public view returns (AskEntry[] memory) {\\n        if (_asksMap.length() > 0) {\\n            uint256 from = page == 0 ? 0 : (page - 1) * size;\\n            uint256 to =\\n                MathUpgradeable.min((page == 0 ? 1 : page) * size, _asksMap.length());\\n            AskEntry[] memory asks = new AskEntry[]((to - from));\\n            for (uint256 i = 0; from < to; ++i) {\\n                (uint256 tokenId, uint256 price) = _asksMap.at(from);\\n                asks[i] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n                ++from;\\n            }\\n            return asks;\\n        } else {\\n            return new AskEntry[](0);\\n        }\\n    }\\n\\n    function getAsksByPageDesc(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        uint256 page,\\n        uint256 size\\n    ) public view returns (AskEntry[] memory) {\\n        if (_asksMap.length() > 0) {\\n            uint256 from =\\n                _asksMap.length() - 1 - (page == 0 ? 0 : (page - 1) * size);\\n            uint256 to =\\n                _asksMap.length() -\\n                    1 -\\n                    MathUpgradeable.min(\\n                        (page == 0 ? 1 : page) * size - 1,\\n                        _asksMap.length() - 1\\n                    );\\n            uint256 resultSize = from - to + 1;\\n            AskEntry[] memory asks = new AskEntry[](resultSize);\\n            if (to == 0) {\\n                for (uint256 i = 0; from > to; ++i) {\\n                    (uint256 tokenId, uint256 price) = _asksMap.at(from);\\n                    asks[i] = AskEntry({\\n                        tokenId: tokenId,\\n                        price: price,\\n                        quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                    });\\n                    --from;\\n                }\\n                (uint256 tokenId, uint256 price) = _asksMap.at(0);\\n                asks[resultSize - 1] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n            } else {\\n                for (uint256 i = 0; from >= to; ++i) {\\n                    (uint256 tokenId, uint256 price) = _asksMap.at(from);\\n                    asks[i] = AskEntry({\\n                        tokenId: tokenId,\\n                        price: price,\\n                        quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                    });\\n                    --from;\\n                }\\n            }\\n            return asks;\\n        }\\n        return new AskEntry[](0);\\n    }\\n\\n    function getAsksByUser(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        mapping(address => EnumerableSet.UintSet) storage _userSellingTokens,\\n        address user\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks =\\n            new AskEntry[](_userSellingTokens[user].length());\\n        for (uint256 i = 0; i < _userSellingTokens[user].length(); ++i) {\\n            uint256 tokenId = _userSellingTokens[user].at(i);\\n            uint256 price = _asksMap.get(tokenId);\\n            address quoteTokenAddr = _asksQuoteTokens[tokenId];\\n            asks[i] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: quoteTokenAddr\\n            });\\n        }\\n        return asks;\\n    }\\n\\n    function getAsksByUserDesc(\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        mapping(address => EnumerableSet.UintSet) storage _userSellingTokens,\\n        address user\\n    ) public view returns (AskEntry[] memory) {\\n        AskEntry[] memory asks =\\n            new AskEntry[](_userSellingTokens[user].length());\\n        if (_userSellingTokens[user].length() > 0) {\\n            for (\\n                uint256 i = _userSellingTokens[user].length() - 1;\\n                i > 0;\\n                --i\\n            ) {\\n                uint256 tokenId = _userSellingTokens[user].at(i);\\n                uint256 price = _asksMap.get(tokenId);\\n                asks[_userSellingTokens[user].length() - 1 - i] = AskEntry({\\n                    tokenId: tokenId,\\n                    price: price,\\n                    quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                });\\n            }\\n            uint256 tokenId = _userSellingTokens[user].at(0);\\n            uint256 price = _asksMap.get(tokenId);\\n            asks[_userSellingTokens[user].length() - 1] = AskEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n            });\\n        }\\n        return asks;        \\n    }\\n}\",\"keccak256\":\"0x7674a43063567fce8e234c6269fdbd81e2dbb083f5443a3e81d5a2568e97d11e\"},\"contracts/libraries/BidHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// import \\\"./EnumerableMap.sol\\\";\\n\\n// import \\\"../openzeppelin/utils/EnumerableMapUpgradeable.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\n\\n\\nlibrary BidHelper {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    struct BidEntry {\\n        address bidder;\\n        uint256 price;\\n        address quoteTokenAddr;\\n        uint256 timestamp;\\n    }\\n\\n    struct UserBidEntry {\\n        uint256 tokenId;\\n        uint256 price;\\n        address quoteTokenAddr;\\n    }\\n\\n    function getUserBids(\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        address user\\n    ) internal view returns (UserBidEntry[] memory) {\\n        uint256 len = _userBids[user].length();\\n        UserBidEntry[] memory bids = new UserBidEntry[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            (uint256 tokenId, uint256 price) = _userBids[user].at(i);\\n            bids[i] = UserBidEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                \\n            });\\n        }\\n        return bids;\\n    }\\n\\n    function getBidByTokenIdAndAddress(\\n        mapping(uint256 => BidEntry[]) storage _tokenBids,\\n        uint256 _tokenId,\\n        address _address\\n    ) internal view returns (BidEntry memory, uint256) {\\n        // find the index of the bid\\n        BidEntry[] memory bidEntries = _tokenBids[_tokenId];\\n        uint256 len = bidEntries.length;\\n        uint256 _index;\\n        BidEntry memory bidEntry;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_address == bidEntries[i].bidder) {\\n                _index = i;\\n                bidEntry = BidEntry({\\n                    bidder: bidEntries[i].bidder,\\n                    price: bidEntries[i].price,\\n                    quoteTokenAddr: bidEntries[i].quoteTokenAddr,\\n                    timestamp: bidEntries[i].timestamp\\n                });\\n                break;\\n            }\\n        }\\n        return (bidEntry, _index);\\n    }\\n}\",\"keccak256\":\"0x1733fd2fabacf33a8cab522126997e17a4343015db0d0119b57fbd02e5aa5259\"},\"contracts/libraries/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\nlibrary EnumerableMap {\\n    struct MapEntry {\\n        uint256 _key;\\n        uint256 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping(uint256 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        uint256 key,\\n        uint256 value\\n    ) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({_key: key, _value: value}));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, uint256 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, uint256 key)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index)\\n        private\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            map._entries.length > index,\\n            \\\"EnumerableMap: index out of bounds\\\"\\n        );\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, uint256 key) private view returns (uint256) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(\\n        Map storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) private view returns (uint256) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return _at(map._inner, index);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _get(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return _get(map._inner, key, errorMessage);\\n    }\\n}\",\"keccak256\":\"0x2d35e8d069cba1035d1f3269fcba8087a4b113b8598b3acd26b81e6c02864ab8\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xf1efe1fb497fe7a09f5238f294de1085e2658a1fca3912a2312eed7dfe254aed\"},\"contracts/libraries/TradeHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"./EnumerableMap.sol\\\";\\n// import \\\"./EnumerableSet.sol\\\";\\n// import \\\"./BidHelper.sol\\\";\\n\\n\\n\\nimport \\\"../openzeppelin/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"../openzeppelin/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n// import \\\"../openzeppelin/utils/EnumerableMapUpgradeable.sol\\\";\\n// import \\\"../openzeppelin/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./BidHelper.sol\\\";\\n\\n\\n\\nlibrary TradeHelper {\\n    using SafeMathUpgradeable for uint256;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    event Bid(\\n        address indexed bidder,\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address quoteTokenAddr,\\n        uint256 timestamp\\n    );\\n\\n    event CancelBidToken(address indexed bidder, uint256 indexed tokenId, uint256 timestamp);\\n\\n    function updateBidPrice(\\n        address _sender,\\n        EnumerableMap.UintToUintMap storage _endTimeMap,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids        \\n    ) public {\\n        require(\\n            _userBids[_sender].contains(_tokenId),\\n            \\\"Only Bidder can update the bid price\\\"\\n        );\\n        //require (_price <=  _asksMap.get(_tokenId), \\\"Offer must be less than sell price\\\");\\n        require(_price != 0, \\\"Price must be granter than zero\\\");\\n        address _to = _sender; // find  bid and the index\\n        (BidHelper.BidEntry memory bidEntry, uint256 _index) =\\n            BidHelper.getBidByTokenIdAndAddress(_tokenBids, _tokenId, _to);\\n        require(bidEntry.price != 0, \\\"Bidder does not exist\\\");\\n        require(bidEntry.price != _price, \\\"The bid price cannot be the same\\\");\\n        require(_endTimeMap.get(_tokenId) > now, \\\"The end time have passed\\\");\\n        if (_price > bidEntry.price) {\\n            IERC20Upgradeable(bidEntry.quoteTokenAddr).safeTransferFrom(\\n                address(_sender),\\n                address(this),\\n                _price - bidEntry.price\\n            );\\n        } else {\\n            IERC20Upgradeable(bidEntry.quoteTokenAddr).transfer(\\n                _to,\\n                bidEntry.price - _price\\n            );\\n        }\\n        _userBids[_to].set(_tokenId, _price);\\n        _tokenBids[_tokenId][_index] = BidHelper.BidEntry({\\n            bidder: _to,\\n            price: _price,\\n            quoteTokenAddr: bidEntry.quoteTokenAddr,\\n            timestamp: now\\n        });\\n        emit Bid(_sender, _tokenId, _price, bidEntry.quoteTokenAddr, now);\\n    }\\n\\n    function delBidByTokenIdAndIndex(\\n        uint256 _tokenId,\\n        uint256 _index,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids\\n    ) public {\\n        _userBids[_tokenBids[_tokenId][_index].bidder].remove(_tokenId);\\n        // delete the bid\\n        uint256 len = _tokenBids[_tokenId].length;\\n        for (uint256 i = _index; i < len - 1; i++) {\\n            _tokenBids[_tokenId][i] = _tokenBids[_tokenId][i + 1];\\n        }\\n        _tokenBids[_tokenId].pop();\\n    }\\n\\n    function cancelBidToken(\\n        address _sender,\\n        uint256 _tokenId,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids\\n    ) public {\\n        require(\\n            _userBids[_sender].contains(_tokenId),\\n            \\\"Only Bidder can cancel the bid\\\"\\n        );\\n        // find  bid and the index\\n        (BidHelper.BidEntry memory bidEntry, uint256 _index) =\\n            BidHelper.getBidByTokenIdAndAddress(_tokenBids, _tokenId, _sender);\\n        require(bidEntry.price != 0, \\\"Bidder does not exist\\\");\\n        IERC20Upgradeable(bidEntry.quoteTokenAddr).transfer(_sender, bidEntry.price);\\n        delBidByTokenIdAndIndex(_tokenId, _index, _tokenBids, _userBids);\\n        emit CancelBidToken(_sender, _tokenId, now);\\n    }\\n\\n    function bidToken(\\n        address _sender,\\n        address _contract,\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        EnumerableMap.UintToUintMap storage _endTimeMap,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        mapping(uint256 => address) storage _tokenSellers,\\n        uint256 _tokenId,\\n        uint256 _price\\n    ) public {\\n        require(\\n            _sender != address(0) && _sender != _contract,\\n            \\\"Wrong msg sender\\\"\\n        );\\n        //require (_price <=  _asksMap.get(_tokenId), \\\"Offer must be less than sell price\\\");\\n        require(_price != 0, \\\"Price must be granter than zero\\\");\\n        require(_asksMap.contains(_tokenId), \\\"Token not in sell book\\\");\\n        address _seller = _tokenSellers[_tokenId];\\n        address _to = address(_sender);\\n        require(_seller != _to, \\\"Owner cannot bid\\\");\\n        require(!_userBids[_to].contains(_tokenId), \\\"Bidder already exists\\\");\\n        require(_endTimeMap.get(_tokenId) > now, \\\"The end time have passed\\\");\\n\\n        address quoteTokenAddr = _asksQuoteTokens[_tokenId];\\n        IERC20Upgradeable(quoteTokenAddr).safeTransferFrom(_sender, _contract, _price);\\n        _userBids[_to].set(_tokenId, _price);\\n        _tokenBids[_tokenId].push(\\n            BidHelper.BidEntry({\\n                bidder: _to,\\n                price: _price,\\n                quoteTokenAddr: quoteTokenAddr,\\n                timestamp: now\\n            })\\n        );\\n        emit Bid(_sender, _tokenId, _price, quoteTokenAddr, now);\\n    }\\n\\n    function trasnferSellMoney(\\n        address _creator,\\n        address _seller,\\n        uint256 _price,\\n        uint256 _feeAmount,\\n        uint256 _feeToOwnerAmount,\\n        address _feeAddr,\\n        address _quoteTokenAddr\\n    ) public {\\n        if (_feeAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).transfer(_feeAddr, _feeAmount);\\n        }\\n        if (_feeToOwnerAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).transfer(_creator, _feeToOwnerAmount);\\n        }\\n        IERC20Upgradeable(_quoteTokenAddr).transfer(\\n            _seller,\\n            _price.sub(_feeAmount).sub(_feeToOwnerAmount)\\n        );\\n    }\\n\\n    function transferBuyMoney(\\n        address _buyer,\\n        address _creator,\\n        address _seller,\\n        uint256 _price,\\n        uint256 _feeAmount,\\n        uint256 _feeToOwnerAmount,\\n        address _feeAddr,\\n        address _quoteTokenAddr\\n    ) public {\\n        if (_feeAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).safeTransferFrom(\\n                _buyer,\\n                _feeAddr,\\n                _feeAmount\\n            );\\n        }\\n        if (_feeToOwnerAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).safeTransferFrom(\\n                _buyer,\\n                _creator,\\n                _feeToOwnerAmount\\n            );\\n        }\\n        IERC20Upgradeable(_quoteTokenAddr).safeTransferFrom(\\n            _buyer,\\n            _seller,\\n            _price.sub(_feeAmount).sub(_feeToOwnerAmount)\\n        );\\n    }\\n}\",\"keccak256\":\"0x90e5347e4dd6dbf44621a0373c0247051f45cbc68bb68a66f4f8fa69b5397bd4\"},\"contracts/openzeppelin/GSN/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal initializer {\\n        __Context_init_unchained();\\n    }\\n\\n    function __Context_init_unchained() internal initializer {\\n    }\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0xd767e6aa56b93673c4e6dbe322700b4b70fb3ea167d164d776d14cebce96d47d\"},\"contracts/openzeppelin/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal initializer {\\n        address msgSender = _msgSender();\\n        _owner = msgSender;\\n        emit OwnershipTransferred(address(0), msgSender);\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(_owner == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        emit OwnershipTransferred(_owner, address(0));\\n        _owner = address(0);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        emit OwnershipTransferred(_owner, newOwner);\\n        _owner = newOwner;\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x1304eeb7b43c255a2487a845c7ec4569d8c05988847d1ec305f0826673328443\"},\"contracts/openzeppelin/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0x0ccce89d8a8258332a2a6f415b550cc67d6b5d7ab87342ea78c643deee4168f6\"},\"contracts/openzeppelin/math/MathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary MathUpgradeable {\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a >= b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow, so we distribute\\n        return (a / 2) + (b / 2) + ((a % 2 + b % 2) / 2);\\n    }\\n}\\n\",\"keccak256\":\"0x9dabe002a2d6d8b83448896728ea6bd2c6a571632decc95832e2093e85c43bc8\"},\"contracts/openzeppelin/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0a0b5ce8001acd3ada4ff669d8c0411395c687806b1e007180470be00f7f74cf\"},\"contracts/openzeppelin/proxy/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\",\"keccak256\":\"0x25c1d94f76fb3720c1c13f31cce2327dfbe6c0675504280e99f31ffdd395e1dc\"},\"contracts/openzeppelin/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xbdf7877e9bd826f5f948745a97d97dc459b8d8d41d5c4d3902f7d5c10d201a10\"},\"contracts/openzeppelin/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x04428d4a4c656a7da19192a8e6ec69f61880d28280582b606b647bbe464030a5\"},\"contracts/openzeppelin/token/ERC721/ERC721HolderUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nimport \\\"./IERC721ReceiverUpgradeable.sol\\\";\\nimport \\\"../../proxy/Initializable.sol\\\";\\n\\n  /**\\n   * @dev Implementation of the {IERC721Receiver} interface.\\n   *\\n   * Accepts all token transfers. \\n   * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n   */\\ncontract ERC721HolderUpgradeable is Initializable, IERC721ReceiverUpgradeable {\\n    function __ERC721Holder_init() internal initializer {\\n        __ERC721Holder_init_unchained();\\n    }\\n\\n    function __ERC721Holder_init_unchained() internal initializer {\\n    }\\n\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address, address, uint256, bytes memory) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x3be95a038159172b35315e7c2fb582a8df97f9b6c6a870fd542bedfb4827fa1d\"},\"contracts/openzeppelin/token/ERC721/IERC721ReceiverUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721ReceiverUpgradeable {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(address operator, address from, uint256 tokenId, bytes calldata data) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x4c7ba555b138af12b45f92803f4d7567123c541cab13b843a670b3fe1e684dd9\"},\"contracts/openzeppelin/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\",\"keccak256\":\"0x461f20d06d82f3db21004e5c0c78335714fe096af5df97519ae01a1810a31486\"},\"contracts/openzeppelin/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x0645931dcc414b28a7e7722f4352d3857b4167edd48f82f2fe208419edc8fa93\"},\"contracts/openzeppelin/utils/PausableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\nimport \\\"../GSN/ContextUpgradeable.sol\\\";\\nimport \\\"../proxy/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract PausableUpgradeable is Initializable, ContextUpgradeable {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    function __Pausable_init() internal initializer {\\n        __Context_init_unchained();\\n        __Pausable_init_unchained();\\n    }\\n\\n    function __Pausable_init_unchained() internal initializer {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        require(!_paused, \\\"Pausable: paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        require(_paused, \\\"Pausable: not paused\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xe6108010231e5ab876acda5618786caa9334f4a65448218c8e2c80b59632f38a\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102535760003560e01c80637fd6f15c11610146578063ab87d98f116100c3578063c5a55e8111610087578063c5a55e81146104e0578063e0d8a845146104f3578063ef879e3b14610506578063f2fde38b14610519578063f31b08131461052c578063f903af201461053457610253565b8063ab87d98f14610481578063abfbac4b14610494578063b84eb76a146104a7578063bb39694b146104ba578063c0838afd146104cd57610253565b80639067b6771161010a5780639067b6771461042257806393024a69146104355780639d1f3d5e146104485780639e7c79da1461045b578063a879537f1461046e57610253565b80637fd6f15c146103ef5780638456cb59146103f757806386fcc629146103ff5780638da5cb5b146104125780638fd60ea51461041a57610253565b806347ccca02116101d45780635fb2f1af116101985780635fb2f1af146103995780636759789f146103ac5780636bb51803146103cc578063715018a6146103d45780637ce3489b146103dc57610253565b806347ccca02146103415780634ae592c81461034957806356a596a91461035c5780635c975abb1461036f5780635e0a30531461038457610253565b80632d296bf11161021b5780632d296bf1146102e957806339ced5dc146102fc57806339e7fddc1461030f5780633c9a3a9d146103245780633f4ba83a1461033957610253565b80630c36edb914610258578063131d9a2714610281578063150b7a02146102a1578063171fe618146102c15780631f39c640146102d6575b600080fd5b61026b610266366004612e37565b610547565b60405161027891906133a7565b60405180910390f35b61029461028f3660046130cb565b6105e4565b60405161027891906133e9565b6102b46102af366004612e6f565b610686565b60405161027891906134a6565b6102d46102cf366004613112565b610696565b005b6102d46102e4366004612e37565b610741565b6102d46102f73660046130cb565b610816565b6102d461030a366004613133565b610848565b61031761087e565b60405161027891906131d6565b61032c61088d565b604051610278919061335a565b6102d4610931565b610317610992565b6102d4610357366004612f27565b6109a1565b6102d461036a36600461316b565b610c3f565b610377610e7b565b604051610278919061349b565b61038c610e84565b6040516102789190613a84565b6102d46103a7366004612e37565b610e95565b6103bf6103ba366004612e37565b610f3c565b6040516102789190613459565b61026b610f4b565b6102d4610fdd565b6102d46103ea3660046130cb565b61105c565b61038c611106565b6102d461110c565b61038c61040d3660046130cb565b61116c565b61031761117e565b61026b61118d565b61038c6104303660046130cb565b6111cb565b610377610443366004612e37565b6111de565b6102d46104563660046130cb565b6112a3565b610377610469366004612e37565b61133f565b61026b61047c366004613112565b611352565b6102d461048f3660046130e3565b6113ed565b6102d46104a2366004613112565b6117f0565b6102d46104b53660046130cb565b6118e5565b6102d46104c8366004613112565b611a46565b6102d46104db3660046130e3565b611abf565b61026b6104ee366004613112565b611edd565b6102d46105013660046130cb565b611f1f565b6102d4610514366004613133565b611fc9565b6102d4610527366004612e37565b6120dd565b61038c612194565b61026b610542366004612e37565b61219a565b6040516324faa96960e01b815260609073__$f79a56cb039e4aaaed07c2ab1700fca110$__906324faa9699061058a9060cd9060cf9060d1908890600401613a45565b60006040518083038186803b1580156105a257600080fd5b505af41580156105b6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105de9190810190612fff565b92915050565b606060d26000838152602001908152602001600020805480602002602001604051908101604052809291908181526020016000905b8282101561067b576000848152602090819020604080516080810182526004860290920180546001600160a01b039081168452600180830154858701526002830154909116928401929092526003015460608301529083529092019101610619565b505050509050919050565b630a85bd0160e11b949350505050565b60975460ff16156106c25760405162461bcd60e51b81526004016106b990613761565b60405180910390fd5b73__$dce04913b579ec29af14f2695ca35e8e63$__6316e5c2d66106e46121dd565b60d6858560d360d26040518763ffffffff1660e01b815260040161070d96959493929190613285565b60006040518083038186803b15801561072557600080fd5b505af4158015610739573d6000803e3d6000fd5b505050505050565b6107496121dd565b6065546001600160a01b039081169116146107765760405162461bcd60e51b81526004016106b990613947565b6001600160a01b03811661078957600080fd5b61079a60d48263ffffffff6121e116565b156107b75760405162461bcd60e51b81526004016106b990613739565b6107c860d48263ffffffff6121f616565b506107d16121dd565b6001600160a01b03167f8ba8b300d195b4d6fd844fbc0fdc406c24940e76a7cd52a3ec552e733a9a3489824260405161080b929190613341565b60405180910390a250565b60975460ff16156108395760405162461bcd60e51b81526004016106b990613761565b610845816104db6121dd565b50565b60975460ff161561086b5760405162461bcd60e51b81526004016106b990613761565b61087983838361036a6121dd565b505050565b60ca546001600160a01b031681565b606061089960d461220b565b67ffffffffffffffff811180156108af57600080fd5b506040519080825280602002602001820160405280156108d9578160200160208202803683370190505b50905060005b6108e960d461220b565b81101561092d5761090160d48263ffffffff61221616565b82828151811061090d57fe5b6001600160a01b03909216602092830291909101909101526001016108df565b5090565b6109396121dd565b6065546001600160a01b039081169116146109665760405162461bcd60e51b81526004016106b990613947565b60975460ff166109885760405162461bcd60e51b81526004016106b990613566565b610990612222565b565b60c9546001600160a01b031681565b600054610100900460ff16806109ba575060005460ff16155b6109d65760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff16158015610a01576000805460ff1961ff0019909116610100171660011790555b610a0961228e565b610a1161230a565b610a1961237a565b6001600160a01b03861615801590610a3a57506001600160a01b0386163014155b610a4357600080fd5b60005b8551811015610b0f5760006001600160a01b0316868281518110610a6657fe5b60200260200101516001600160a01b031614158015610aaa5750306001600160a01b0316868281518110610a9657fe5b60200260200101516001600160a01b031614155b610ab357600080fd5b610ada868281518110610ac257fe5b602002602001015160d46121e190919063ffffffff16565b610b0757610b05868281518110610aed57fe5b602002602001015160d46121f690919063ffffffff16565b505b600101610a46565b5060c980546001600160a01b038089166001600160a01b03199283161790925560ca80548784169216919091179081905560cb85905560cc8490556040519116906000907ffdb146ef60c752238b4c7fd13d89b42c1cbfb5389d137a4423e6bcf71f4519a990610b80904290613a84565b60405180910390a3610b906121dd565b6001600160a01b03167f6d570aa94f32ba8b881d0cc142231f89c900cd83181fab73c145bb7aa75b9a86600060cb5442604051610bcf939291906134bb565b60405180910390a2610bdf6121dd565b6001600160a01b03167f0a1d81b3d0be5e4225af42981d61ccfffd4f6ee65c87b0f1c0fd484a5cc24207600060cc5442604051610c1e939291906134bb565b60405180910390a28015610739576000805461ff0019169055505050505050565b60975460ff1615610c625760405162461bcd60e51b81526004016106b990613761565b81610c7460d48263ffffffff6121e116565b610c7d57600080fd5b60c9546040516331a9108f60e11b81526001600160a01b0390911690636352211e90610cad908890600401613a84565b60206040518083038186803b158015610cc557600080fd5b505afa158015610cd9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cfd9190612e53565b6001600160a01b0316610d0e6121dd565b6001600160a01b031614610d345760405162461bcd60e51b81526004016106b99061378b565b83610d515760405162461bcd60e51b81526004016106b9906136cb565b60c9546001600160a01b03166342842e0e610d6a6121dd565b30886040518463ffffffff1660e01b8152600401610d8a939291906132de565b600060405180830381600087803b158015610da457600080fd5b505af1158015610db8573d6000803e3d6000fd5b50610dd1925060cd91508790508663ffffffff6123ea16565b50600085815260cf6020908152604080832080546001600160a01b038089166001600160a01b03199283161790925560d0845282852080549288169290911682179055835260d19091529020610e2d908663ffffffff6123ff16565b5084826001600160a01b03167f4ac78190837ea614d8b5d9075e513dbd9694da161ab82290d5015c1422b9534f868642604051610e6c93929190613a8d565b60405180910390a35050505050565b60975460ff1690565b6000610e9060cd61220b565b905090565b60ca546001600160a01b0316610ea96121dd565b6001600160a01b031614610ecf5760405162461bcd60e51b81526004016106b9906137c2565b60ca80546001600160a01b0319166001600160a01b03838116919091179182905516610ef96121dd565b6001600160a01b03167ffdb146ef60c752238b4c7fd13d89b42c1cbfb5389d137a4423e6bcf71f4519a942604051610f319190613a84565b60405180910390a350565b60606105de60d360cf8461240b565b60405163123f40e560e31b815260609073__$f79a56cb039e4aaaed07c2ab1700fca110$__906391fa072890610f899060cd9060cf90600401613a37565b60006040518083038186803b158015610fa157600080fd5b505af4158015610fb5573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610e909190810190612fff565b610fe56121dd565b6065546001600160a01b039081169116146110125760405162461bcd60e51b81526004016106b990613947565b6065546040516000916001600160a01b0316907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908390a3606580546001600160a01b0319169055565b6110646121dd565b6065546001600160a01b039081169116146110915760405162461bcd60e51b81526004016106b990613947565b8060cb5414156110b35760405162461bcd60e51b81526004016106b990613833565b6110bb6121dd565b6001600160a01b03167f6d570aa94f32ba8b881d0cc142231f89c900cd83181fab73c145bb7aa75b9a8660cb5483426040516110f9939291906134bb565b60405180910390a260cb55565b60cb5481565b6111146121dd565b6065546001600160a01b039081169116146111415760405162461bcd60e51b81526004016106b990613947565b60975460ff16156111645760405162461bcd60e51b81526004016106b990613761565b610990612523565b600090815260d2602052604090205490565b6065546001600160a01b031690565b60405163e2da53bb60e01b815260609073__$f79a56cb039e4aaaed07c2ab1700fca110$__9063e2da53bb90610f899060cd9060cf90600401613a37565b60006105de60d68363ffffffff61257c16565b60006111e86121dd565b6065546001600160a01b039081169116146112155760405162461bcd60e51b81526004016106b990613947565b61122660d48363ffffffff6121e116565b6112425760405162461bcd60e51b81526004016106b99061397c565b61125360d48363ffffffff61258816565b5061125c6121dd565b6001600160a01b03167f8ad26e36d6a8f9717e28226e48ffbce9f20a9dc08acb27fb9b09dfcc22e9540c8342604051611296929190613341565b60405180910390a2919050565b60975460ff16156112c65760405162461bcd60e51b81526004016106b990613761565b73__$dce04913b579ec29af14f2695ca35e8e63$__6395bcd8966112e86121dd565b8360d260d36040518563ffffffff1660e01b815260040161130c94939291906132b8565b60006040518083038186803b15801561132457600080fd5b505af4158015611338573d6000803e3d6000fd5b5050505050565b60006105de60d48363ffffffff6121e116565b604051620743eb60e01b815260609073__$f79a56cb039e4aaaed07c2ab1700fca110$__90620743eb906113929060cd9060cf9088908890600401613a69565b60006040518083038186803b1580156113aa57600080fd5b505af41580156113be573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526113e69190810190612fff565b9392505050565b60975460ff16156114105760405162461bcd60e51b81526004016106b990613761565b61142160cd8363ffffffff61259d16565b61143d5760405162461bcd60e51b81526004016106b990613594565b6114456121dd565b600083815260d060205260409020546001600160a01b0390811691161461147e5760405162461bcd60e51b81526004016106b990613694565b611486612dbd565b600061149460d285856125a9565b915091508160200151600014156114bd5760405162461bcd60e51b81526004016106b990613918565b60c954604051632142170760e11b81526001600160a01b03909116906342842e0e906114f1903090879089906004016132de565b600060405180830381600087803b15801561150b57600080fd5b505af115801561151f573d6000803e3d6000fd5b50505050600061155768056bc75e2d6310000061154b60cb54866020015161273c90919063ffffffff16565b9063ffffffff61277616565b9050600061158168056bc75e2d6310000061154b60cc54876020015161273c90919063ffffffff16565b60c954604051634f4a156760e11b815291925073__$dce04913b579ec29af14f2695ca35e8e63$__91630fbffb22916001600160a01b031690639e942ace906115ce908b90600401613a84565b60206040518083038186803b1580156115e657600080fd5b505afa1580156115fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061161e9190612e53565b600089815260d060209081526040808320548a83015160ca5460cf909452938290205491516001600160e01b031960e088901b16815261167a95946001600160a01b039283169490938b938b9392811692911690600401613302565b60006040518083038186803b15801561169257600080fd5b505af41580156116a6573d6000803e3d6000fd5b505050506116be8660cd6127b890919063ffffffff16565b50600086815260d060209081526040808320546001600160a01b0316835260d190915290206116f3908763ffffffff6127c416565b50604051634d45d4fb60e01b815273__$dce04913b579ec29af14f2695ca35e8e63$__90634d45d4fb90611733908990879060d29060d390600401613a69565b60006040518083038186803b15801561174b57600080fd5b505af415801561175f573d6000803e3d6000fd5b505050600087815260d0602090815260409182902054908701518783015192518a94506001600160a01b03808b16949316927fc3fa2ca57fef6688559d9938d57cec3eeb6d96f65d94954175a642e061b2b365926117c592909190899089904290613aac565b60405180910390a45050506000928352505060d06020526040902080546001600160a01b0319169055565b60975460ff16156118135760405162461bcd60e51b81526004016106b990613761565b6118488260d160006118236121dd565b6001600160a01b0316815260208101919091526040016000209063ffffffff6127d016565b6118645760405162461bcd60e51b81526004016106b99061399f565b4281116118835760405162461bcd60e51b81526004016106b9906135c4565b61189560d6838363ffffffff6123ea16565b508161189f6121dd565b6001600160a01b03167f4bc4fae9c74870608ec4f18f0b7d747fe83d2067825f4298f09741b4f3b1072083426040516118d9929190613a37565b60405180910390a35050565b60975460ff16156119085760405162461bcd60e51b81526004016106b990613761565b6119188160d160006118236121dd565b6119345760405162461bcd60e51b81526004016106b990613653565b60c9546001600160a01b03166342842e0e3061194e6121dd565b846040518463ffffffff1660e01b815260040161196d939291906132de565b600060405180830381600087803b15801561198757600080fd5b505af115801561199b573d6000803e3d6000fd5b505050506119b38160cd6127b890919063ffffffff16565b50600081815260d060209081526040808320546001600160a01b0316835260d190915290206119e8908263ffffffff6127c416565b50600081815260d06020526040902080546001600160a01b031916905580611a0e6121dd565b6001600160a01b03167f23ede95e7fe19d19bdfe5713868a4fa171abc210cb5640f5a58cc67948f9d69442604051610f319190613a84565b60975460ff1615611a695760405162461bcd60e51b81526004016106b990613761565b73__$dce04913b579ec29af14f2695ca35e8e63$__6350c63361611a8b6121dd565b3060cd60d660d360d260cf60d08b8b6040518b63ffffffff1660e01b815260040161070d9a99989796959493929190613232565b60975460ff1615611ae25760405162461bcd60e51b81526004016106b990613761565b6000611aec6121dd565b6001600160a01b031614158015611b13575030611b076121dd565b6001600160a01b031614155b611b2f5760405162461bcd60e51b81526004016106b990613a0d565b611b4060cd8363ffffffff61259d16565b611b5c5760405162461bcd60e51b81526004016106b990613594565b611b918260d36000611b6c6121dd565b6001600160a01b0316815260208101919091526040016000209063ffffffff61259d16565b15611bae5760405162461bcd60e51b81526004016106b990613702565b42611bc060d68463ffffffff61257c16565b11611bdd5760405162461bcd60e51b81526004016106b9906139d6565b60c954604051632142170760e11b81526001600160a01b03909116906342842e0e90611c11903090859087906004016132de565b600060405180830381600087803b158015611c2b57600080fd5b505af1158015611c3f573d6000803e3d6000fd5b505050506000611c598360cd61257c90919063ffffffff16565b90506000611c7f68056bc75e2d6310000061154b60cb548561273c90919063ffffffff16565b90506000611ca568056bc75e2d6310000061154b60cc548661273c90919063ffffffff16565b905073__$dce04913b579ec29af14f2695ca35e8e63$__6309e66ac8611cc96121dd565b60c954604051634f4a156760e11b81526001600160a01b0390911690639e942ace90611cf9908b90600401613a84565b60206040518083038186803b158015611d1157600080fd5b505afa158015611d25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d499190612e53565b600089815260d060205260409020546001600160a01b0316611d7260cd8b63ffffffff61257c16565b60ca5460008c815260cf60205260409081902054905160e088901b6001600160e01b0319168152611dbd96959493928b928b926001600160a01b0392831692909116906004016131ea565b60006040518083038186803b158015611dd557600080fd5b505af4158015611de9573d6000803e3d6000fd5b50505050611e018560cd6127b890919063ffffffff16565b50600085815260cf6020908152604080832080546001600160a01b031916905560d08252808320546001600160a01b0316835260d19091529020611e4b908663ffffffff6127c416565b50600085815260d0602090815260408083205460cf909252918290205460cc54925188936001600160a01b03898116948116937fc3fa2ca57fef6688559d9938d57cec3eeb6d96f65d94954175a642e061b2b36593611eb3938b93909216918a914290613aac565b60405180910390a450505060009182525060d06020526040902080546001600160a01b0319169055565b604051631decd71d60e31b815260609073__$f79a56cb039e4aaaed07c2ab1700fca110$__9063ef66b8e8906113929060cd9060cf9088908890600401613a69565b611f276121dd565b6065546001600160a01b03908116911614611f545760405162461bcd60e51b81526004016106b990613947565b8060cc541415611f765760405162461bcd60e51b81526004016106b990613833565b611f7e6121dd565b6001600160a01b03167f0a1d81b3d0be5e4225af42981d61ccfffd4f6ee65c87b0f1c0fd484a5cc2420760cc548342604051611fbc939291906134bb565b60405180910390a260cc55565b60975460ff1615611fec5760405162461bcd60e51b81526004016106b990613761565b80611ffe60d48263ffffffff6121e116565b61200757600080fd5b6120178460d160006118236121dd565b6120335760405162461bcd60e51b81526004016106b9906138a0565b826120505760405162461bcd60e51b81526004016106b9906136cb565b61206260cd858563ffffffff6123ea16565b50600084815260cf6020526040902080546001600160a01b0319166001600160a01b038416179055836120936121dd565b6001600160a01b03167f4ac78190837ea614d8b5d9075e513dbd9694da161ab82290d5015c1422b9534f8585426040516120cf93929190613a8d565b60405180910390a350505050565b6120e56121dd565b6065546001600160a01b039081169116146121125760405162461bcd60e51b81526004016106b990613947565b6001600160a01b0381166121385760405162461bcd60e51b81526004016106b99061360d565b6065546040516001600160a01b038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3606580546001600160a01b0319166001600160a01b0392909216919091179055565b60cc5481565b60405163727fe92f60e01b815260609073__$f79a56cb039e4aaaed07c2ab1700fca110$__9063727fe92f9061058a9060cd9060cf9060d1908890600401613a45565b3390565b60006113e6836001600160a01b0384166127d8565b60006113e6836001600160a01b0384166127f0565b60006105de8261283a565b60006113e6838361283e565b60975460ff166122445760405162461bcd60e51b81526004016106b990613566565b6097805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa6122776121dd565b60405161228491906131d6565b60405180910390a1565b600054610100900460ff16806122a7575060005460ff16155b6122c35760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff161580156122ee576000805460ff1961ff0019909116610100171660011790555b6122f6612883565b8015610845576000805461ff001916905550565b600054610100900460ff1680612323575060005460ff16155b61233f5760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff1615801561236a576000805460ff1961ff0019909116610100171660011790555b612372612883565b6122f66128f6565b600054610100900460ff1680612393575060005460ff16155b6123af5760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff161580156123da576000805460ff1961ff0019909116610100171660011790555b6123e2612883565b6122f66129c2565b60006123f7848484612a40565b949350505050565b60006113e683836127f0565b6001600160a01b0381166000908152602084905260408120606091906124309061220b565b905060608167ffffffffffffffff8111801561244b57600080fd5b5060405190808252806020026020018201604052801561248557816020015b612472612df7565b81526020019060019003908161246a5790505b50905060005b82811015612519576001600160a01b038516600090815260208890526040812081906124bd908463ffffffff612ad716565b6040805160608101825283815260208082018490526000858152908d9052829020546001600160a01b03169181019190915286519294509092509085908590811061250457fe5b6020908102919091010152505060010161248b565b5095945050505050565b60975460ff16156125465760405162461bcd60e51b81526004016106b990613761565b6097805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586122776121dd565b60006113e68383612aef565b60006113e6836001600160a01b038416612b31565b60006113e683836127d8565b6125b1612dbd565b6000838152602085815260408083208054825181850281018501909352808352606093859084015b8282101561263b576000848152602090819020604080516080810182526004860290920180546001600160a01b0390811684526001808301548587015260028301549091169284019290925260030154606083015290835290920191016125d9565b5050505090506000815190506000612651612dbd565b60005b8381101561272e5784818151811061266857fe5b6020026020010151600001516001600160a01b0316886001600160a01b031614156127265780925060405180608001604052808683815181106126a757fe5b6020026020010151600001516001600160a01b031681526020018683815181106126cd57fe5b60200260200101516020015181526020018683815181106126ea57fe5b6020026020010151604001516001600160a01b0316815260200186838151811061271057fe5b602002602001015160600151815250915061272e565b600101612654565b509890975095505050505050565b60008261274b575060006105de565b8282028284828161275857fe5b04146113e65760405162461bcd60e51b81526004016106b9906138d7565b60006113e683836040518060400160405280601a81526020017f536166654d6174683a206469766973696f6e206279207a65726f000000000000815250612bf7565b60006113e68383612c2e565b60006113e68383612b31565b60006113e683835b60009081526001919091016020526040902054151590565b60006127fc83836127d8565b612832575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556105de565b5060006105de565b5490565b815460009082106128615760405162461bcd60e51b81526004016106b990613524565b82600001828154811061287057fe5b9060005260206000200154905092915050565b600054610100900460ff168061289c575060005460ff16155b6128b85760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff161580156122f6576000805460ff1961ff0019909116610100171660011790558015610845576000805461ff001916905550565b600054610100900460ff168061290f575060005460ff16155b61292b5760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff16158015612956576000805460ff1961ff0019909116610100171660011790555b60006129606121dd565b606580546001600160a01b0319166001600160a01b038316908117909155604051919250906000907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3508015610845576000805461ff001916905550565b600054610100900460ff16806129db575060005460ff16155b6129f75760405162461bcd60e51b81526004016106b9906137e5565b600054610100900460ff16158015612a22576000805460ff1961ff0019909116610100171660011790555b6097805460ff191690558015610845576000805461ff001916905550565b600082815260018401602052604081205480612aa55750506040805180820182528381526020808201848152865460018181018955600089815284812095516002909302909501918255915190820155865486845281880190925292909120556113e6565b82856000016001830381548110612ab857fe5b90600052602060002090600202016001018190555060009150506113e6565b600080612ae48484612d02565b915091509250929050565b60006113e683836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000815250612d5e565b60008181526001830160205260408120548015612bed5783546000198083019190810190600090879083908110612b6457fe5b9060005260206000200154905080876000018481548110612b8157fe5b600091825260208083209091019290925582815260018981019092526040902090840190558654879080612bb157fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506105de565b60009150506105de565b60008183612c185760405162461bcd60e51b81526004016106b991906134d1565b506000838581612c2457fe5b0495945050505050565b60008181526001830160205260408120548015612bed5783546000198083019190810190600090879083908110612c6157fe5b9060005260206000209060020201905080876000018481548110612c8157fe5b600091825260208083208454600290930201918255600193840154918401919091558354825289830190526040902090840190558654879080612cc057fe5b60008281526020808220600260001990940193840201828155600190810183905592909355888152898201909252604082209190915594506105de9350505050565b815460009081908310612d275760405162461bcd60e51b81526004016106b99061385e565b6000846000018481548110612d3857fe5b906000526020600020906002020190508060000154816001015492509250509250929050565b60008281526001840160205260408120548281612d8e5760405162461bcd60e51b81526004016106b991906134d1565b50846000016001820381548110612da157fe5b9060005260206000209060020201600101549150509392505050565b604051806080016040528060006001600160a01b031681526020016000815260200160006001600160a01b03168152602001600081525090565b6040518060600160405280600081526020016000815260200160006001600160a01b031681525090565b80356105de81613b1f565b80516105de81613b1f565b600060208284031215612e48578081fd5b81356113e681613b1f565b600060208284031215612e64578081fd5b81516113e681613b1f565b60008060008060808587031215612e84578283fd5b8435612e8f81613b1f565b9350602085810135612ea081613b1f565b935060408601359250606086013567ffffffffffffffff80821115612ec3578384fd5b81880189601f820112612ed4578485fd5b8035925081831115612ee4578485fd5b612ef6601f8401601f19168501613ad8565b91508282528984848301011115612f0b578485fd5b8284820185840137509081019091019190915292959194509250565b600080600080600060a08688031215612f3e578081fd5b8535612f4981613b1f565b945060208681013567ffffffffffffffff811115612f65578283fd5b80880189601f820112612f76578384fd5b80359150612f8b612f8683613aff565b613ad8565b82815283810190828501858502840186018d1015612fa7578687fd5b8693505b84841015612fd157612fbd8d82612e21565b835260019390930192918501918501612fab565b508098505050505050612fe78760408801612e21565b94979396509394606081013594506080013592915050565b60006020808385031215613011578182fd5b825167ffffffffffffffff811115613027578283fd5b80840185601f820112613038578384fd5b80519150613048612f8683613aff565b828152838101908285016060808602850187018a1015613066578788fd5b8794505b858510156130bd5780828b031215613080578788fd5b61308981613ad8565b82518152878301518882015260406130a38c828601612e2c565b90820152845260019490940193928601929081019061306a565b509098975050505050505050565b6000602082840312156130dc578081fd5b5035919050565b600080604083850312156130f5578182fd5b82359150602083013561310781613b1f565b809150509250929050565b60008060408385031215613124578182fd5b50508035926020909101359150565b600080600060608486031215613147578283fd5b8335925060208401359150604084013561316081613b1f565b809150509250925092565b60008060008060808587031215613180578384fd5b8435935060208501359250604085013561319981613b1f565b915060608501356131a981613b1f565b939692955090935050565b80518252602080820151908301526040908101516001600160a01b0316910152565b6001600160a01b0391909116815260200190565b6001600160a01b039889168152968816602088015294871660408701526060860193909352608085019190915260a0840152831660c083015290911660e08201526101000190565b6001600160a01b039a8b16815298909916602089015260408801969096526060870194909452608086019290925260a085015260c084015260e08301526101008201526101208101919091526101400190565b6001600160a01b03969096168652602086019490945260408501929092526060840152608083015260a082015260c00190565b6001600160a01b0394909416845260208401929092526040830152606082015260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b0397881681529587166020870152604086019490945260608501929092526080840152831660a083015290911660c082015260e00190565b6001600160a01b03929092168252602082015260400190565b6020808252825182820181905260009190848201906040850190845b8181101561339b5783516001600160a01b031683529284019291840191600101613376565b50909695505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561339b576133d68385516131b4565b92840192606092909201916001016133c3565b602080825282518282018190526000919060409081850190868401855b8281101561344c57815180516001600160a01b03908116865287820151888701528682015116868601526060908101519085015260809093019290850190600101613406565b5091979650505050505050565b6020808252825182820181905260009190848201906040850190845b8181101561339b576134888385516131b4565b9284019260609290920191600101613475565b901515815260200190565b6001600160e01b031991909116815260200190565b9283526020830191909152604082015260600190565b6000602080835283518082850152825b818110156134fd578581018301518582016040015282016134e1565b8181111561350e5783604083870101525b50601f01601f1916929092016040019392505050565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b60208082526014908201527314185d5cd8589b194e881b9bdd081c185d5cd95960621b604082015260600190565b602080825260169082015275546f6b656e206e6f7420696e2073656c6c20626f6f6b60501b604082015260600190565b60208082526029908201527f456e6474696d65206d757374206265206772616e746572207468616e2063757260408201526872656e742074696d6560b81b606082015260800190565b60208082526026908201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160408201526564647265737360d01b606082015260800190565b60208082526021908201527f4f6e6c792053656c6c65722063616e2063616e63656c2073656c6c20746f6b656040820152603760f91b606082015260800190565b60208082526019908201527f4f6e6c79206f776e65722063616e2073656c6c20746f6b656e00000000000000604082015260600190565b6020808252601f908201527f5072696365206d757374206265206772616e746572207468616e207a65726f00604082015260600190565b6020808252601e908201527f596f75206d7573742063616e63656c20796f7572206269642066697273740000604082015260600190565b6020808252600e908201526d616c72656164792065786973747360901b604082015260600190565b60208082526010908201526f14185d5cd8589b194e881c185d5cd95960821b604082015260600190565b6020808252601f908201527f4f6e6c7920546f6b656e204f776e65722063616e2073656c6c20746f6b656e00604082015260600190565b6020808252600990820152682327a92124a22222a760b91b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201526d191e481a5b9a5d1a585b1a5e995960921b606082015260800190565b6020808252601190820152704e6f206e65656420746f2075706461746560781b604082015260600190565b60208082526022908201527f456e756d657261626c654d61703a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252601c908201527f4f6e6c792053656c6c65722063616e2075706461746520707269636500000000604082015260600190565b60208082526021908201527f536166654d6174683a206d756c7469706c69636174696f6e206f766572666c6f6040820152607760f81b606082015260800190565b602080825260159082015274109a5919195c88191bd95cc81b9bdd08195e1a5cdd605a1b604082015260600190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b6020808252600990820152681b9bdd08199bdd5b9960ba1b604082015260600190565b6020808252601b908201527f4f6e6c792053656c6c65722063616e2073657420656e6474696d650000000000604082015260600190565b60208082526018908201527f54686520656e642074696d652068617665207061737365640000000000000000604082015260600190565b60208082526010908201526f2bb937b7339036b9b39039b2b73232b960811b604082015260600190565b918252602082015260400190565b938452602084019290925260408301526001600160a01b0316606082015260800190565b93845260208401929092526040830152606082015260800190565b90815260200190565b9283526001600160a01b03919091166020830152604082015260600190565b9485526001600160a01b0393909316602085015260408401919091526060830152608082015260a00190565b60405181810167ffffffffffffffff81118282101715613af757600080fd5b604052919050565b600067ffffffffffffffff821115613b15578081fd5b5060209081020190565b6001600160a01b038116811461084557600080fdfea264697066735822122032adcf5354a154ff638443f748443b85a69d3c79aa4e25de7f02142358ea6ba464736f6c63430006060033",
  "libraries": {
    "AskHelper": "0x2831ce951483783aed79FB33e05C036ce304073c",
    "TradeHelper": "0xa53E308e0c2D7dC01498433f0E6E5c5524ac0893"
  },
  "devdoc": {
    "methods": {
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}.     * Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner.     * NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 5481,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 5483,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 6389,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 4682,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "__gap",
        "offset": 0,
        "slot": "51",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 5002,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_owner",
        "offset": 0,
        "slot": "101",
        "type": "t_address"
      },
      {
        "astId": 5120,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "__gap",
        "offset": 0,
        "slot": "102",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 8811,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_paused",
        "offset": 0,
        "slot": "151",
        "type": "t_bool"
      },
      {
        "astId": 8900,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "__gap",
        "offset": 0,
        "slot": "152",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 739,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "nft",
        "offset": 0,
        "slot": "201",
        "type": "t_contract(IArtworkNFT)2109"
      },
      {
        "astId": 741,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "feeAddr",
        "offset": 0,
        "slot": "202",
        "type": "t_address"
      },
      {
        "astId": 743,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "feePercent",
        "offset": 0,
        "slot": "203",
        "type": "t_uint256"
      },
      {
        "astId": 745,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "feeToMinterPercent",
        "offset": 0,
        "slot": "204",
        "type": "t_uint256"
      },
      {
        "astId": 747,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_asksMap",
        "offset": 0,
        "slot": "205",
        "type": "t_struct(UintToUintMap)3357_storage"
      },
      {
        "astId": 751,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_asksQuoteTokens",
        "offset": 0,
        "slot": "207",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 755,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_tokenSellers",
        "offset": 0,
        "slot": "208",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 759,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_userSellingTokens",
        "offset": 0,
        "slot": "209",
        "type": "t_mapping(t_address,t_struct(UintSet)3781_storage)"
      },
      {
        "astId": 764,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_tokenBids",
        "offset": 0,
        "slot": "210",
        "type": "t_mapping(t_uint256,t_array(t_struct(BidEntry)2912_storage)dyn_storage)"
      },
      {
        "astId": 768,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_userBids",
        "offset": 0,
        "slot": "211",
        "type": "t_mapping(t_address,t_struct(UintToUintMap)3357_storage)"
      },
      {
        "astId": 770,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_quoteErc20Tokens",
        "offset": 0,
        "slot": "212",
        "type": "t_struct(AddressSet)3672_storage"
      },
      {
        "astId": 772,
        "contract": "contracts/BidNFTV2.sol:BidNFTV2",
        "label": "_endTimeMap",
        "offset": 0,
        "slot": "214",
        "type": "t_struct(UintToUintMap)3357_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(BidEntry)2912_storage)dyn_storage": {
        "base": "t_struct(BidEntry)2912_storage",
        "encoding": "dynamic_array",
        "label": "struct BidHelper.BidEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(MapEntry)3085_storage)dyn_storage": {
        "base": "t_struct(MapEntry)3085_storage",
        "encoding": "dynamic_array",
        "label": "struct EnumerableMap.MapEntry[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(IArtworkNFT)2109": {
        "encoding": "inplace",
        "label": "contract IArtworkNFT",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(UintSet)3781_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableSet.UintSet)",
        "numberOfBytes": "32",
        "value": "t_struct(UintSet)3781_storage"
      },
      "t_mapping(t_address,t_struct(UintToUintMap)3357_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct EnumerableMap.UintToUintMap)",
        "numberOfBytes": "32",
        "value": "t_struct(UintToUintMap)3357_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_array(t_struct(BidEntry)2912_storage)dyn_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct BidHelper.BidEntry[])",
        "numberOfBytes": "32",
        "value": "t_array(t_struct(BidEntry)2912_storage)dyn_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)3672_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 3671,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3492_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(BidEntry)2912_storage": {
        "encoding": "inplace",
        "label": "struct BidHelper.BidEntry",
        "members": [
          {
            "astId": 2905,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "bidder",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 2907,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "price",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2909,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "quoteTokenAddr",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          },
          {
            "astId": 2911,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "timestamp",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_struct(Map)3093_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.Map",
        "members": [
          {
            "astId": 3088,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_entries",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_struct(MapEntry)3085_storage)dyn_storage"
          },
          {
            "astId": 3092,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_uint256,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MapEntry)3085_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.MapEntry",
        "members": [
          {
            "astId": 3082,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_key",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3084,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_value",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)3492_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 3487,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 3491,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintSet)3781_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.UintSet",
        "members": [
          {
            "astId": 3780,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)3492_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(UintToUintMap)3357_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableMap.UintToUintMap",
        "members": [
          {
            "astId": 3356,
            "contract": "contracts/BidNFTV2.sol:BidNFTV2",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Map)3093_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}