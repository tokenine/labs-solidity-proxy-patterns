{
  "address": "0x68cF2bf67ec8eBA1F1A4b4150B50160057c11208",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "quoteTokenAddr",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "Bid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "CancelBidToken",
      "type": "event"
    }
  ],
  "transactionHash": "0x8c4cd478f918f98e6d0c683eee7584afd377dba23bfdfa6bfd98ddd76eafc96c",
  "receipt": {
    "to": null,
    "from": "0xd0BE34550AC47e616B7220564605BA00912A5FeF",
    "contractAddress": "0x68cF2bf67ec8eBA1F1A4b4150B50160057c11208",
    "transactionIndex": 0,
    "gasUsed": "1414860",
    "logsBloom": "0x
    "blockHash": "0x98e82478c09db101ca3b7f9d1fedc7be568d90eba3d1c7acef7246e3bf4f28bd",
    "transactionHash": "0x8c4cd478f918f98e6d0c683eee7584afd377dba23bfdfa6bfd98ddd76eafc96c",
    "logs": [],
    "blockNumber": 9785568,
    "cumulativeGasUsed": "1414860",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "da988d3e82b882c8d27feceedf97cc0e",
  "metadata": "{\"compiler\":{\"version\":\"0.6.6+commit.6c089d02\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"quoteTokenAddr\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"Bid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"CancelBidToken\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/TradeHelper.sol\":\"TradeHelper\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/libraries/BidHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// import \\\"./EnumerableMap.sol\\\";\\n\\n// import \\\"../openzeppelin/utils/EnumerableMapUpgradeable.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\n\\n\\nlibrary BidHelper {\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n\\n    struct BidEntry {\\n        address bidder;\\n        uint256 price;\\n        address quoteTokenAddr;\\n        uint256 timestamp;\\n    }\\n\\n    struct UserBidEntry {\\n        uint256 tokenId;\\n        uint256 price;\\n        address quoteTokenAddr;\\n    }\\n\\n    function getUserBids(\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        address user\\n    ) internal view returns (UserBidEntry[] memory) {\\n        uint256 len = _userBids[user].length();\\n        UserBidEntry[] memory bids = new UserBidEntry[](len);\\n        for (uint256 i = 0; i < len; i++) {\\n            (uint256 tokenId, uint256 price) = _userBids[user].at(i);\\n            bids[i] = UserBidEntry({\\n                tokenId: tokenId,\\n                price: price,\\n                quoteTokenAddr: _asksQuoteTokens[tokenId]\\n                \\n            });\\n        }\\n        return bids;\\n    }\\n\\n    function getBidByTokenIdAndAddress(\\n        mapping(uint256 => BidEntry[]) storage _tokenBids,\\n        uint256 _tokenId,\\n        address _address\\n    ) internal view returns (BidEntry memory, uint256) {\\n        // find the index of the bid\\n        BidEntry[] memory bidEntries = _tokenBids[_tokenId];\\n        uint256 len = bidEntries.length;\\n        uint256 _index;\\n        BidEntry memory bidEntry;\\n        for (uint256 i = 0; i < len; i++) {\\n            if (_address == bidEntries[i].bidder) {\\n                _index = i;\\n                bidEntry = BidEntry({\\n                    bidder: bidEntries[i].bidder,\\n                    price: bidEntries[i].price,\\n                    quoteTokenAddr: bidEntries[i].quoteTokenAddr,\\n                    timestamp: bidEntries[i].timestamp\\n                });\\n                break;\\n            }\\n        }\\n        return (bidEntry, _index);\\n    }\\n}\",\"keccak256\":\"0x1733fd2fabacf33a8cab522126997e17a4343015db0d0119b57fbd02e5aa5259\"},\"contracts/libraries/EnumerableMap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\nlibrary EnumerableMap {\\n    struct MapEntry {\\n        uint256 _key;\\n        uint256 _value;\\n    }\\n\\n    struct Map {\\n        // Storage of map keys and values\\n        MapEntry[] _entries;\\n        // Position of the entry defined by a key in the `entries` array, plus 1\\n        // because index 0 means a key is not in the map.\\n        mapping(uint256 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function _set(\\n        Map storage map,\\n        uint256 key,\\n        uint256 value\\n    ) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex == 0) {\\n            // Equivalent to !contains(map, key)\\n            map._entries.push(MapEntry({_key: key, _value: value}));\\n            // The entry is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            map._indexes[key] = map._entries.length;\\n            return true;\\n        } else {\\n            map._entries[keyIndex - 1]._value = value;\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a key-value pair from a map. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function _remove(Map storage map, uint256 key) private returns (bool) {\\n        // We read and store the key's index to prevent multiple reads from the same storage slot\\n        uint256 keyIndex = map._indexes[key];\\n\\n        if (keyIndex != 0) {\\n            // Equivalent to contains(map, key)\\n            // To delete a key-value pair from the _entries array in O(1), we swap the entry to delete with the last one\\n            // in the array, and then remove the last entry (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = keyIndex - 1;\\n            uint256 lastIndex = map._entries.length - 1;\\n\\n            // When the entry to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            MapEntry storage lastEntry = map._entries[lastIndex];\\n\\n            // Move the last entry to the index where the entry to delete is\\n            map._entries[toDeleteIndex] = lastEntry;\\n            // Update the index for the moved entry\\n            map._indexes[lastEntry._key] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved entry was stored\\n            map._entries.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete map._indexes[key];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function _contains(Map storage map, uint256 key)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return map._indexes[key] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of key-value pairs in the map. O(1).\\n     */\\n    function _length(Map storage map) private view returns (uint256) {\\n        return map._entries.length;\\n    }\\n\\n    /**\\n     * @dev Returns the key-value pair stored at position `index` in the map. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of entries inside the\\n     * array, and it may change when more entries are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Map storage map, uint256 index)\\n        private\\n        view\\n        returns (uint256, uint256)\\n    {\\n        require(\\n            map._entries.length > index,\\n            \\\"EnumerableMap: index out of bounds\\\"\\n        );\\n\\n        MapEntry storage entry = map._entries[index];\\n        return (entry._key, entry._value);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function _get(Map storage map, uint256 key) private view returns (uint256) {\\n        return _get(map, key, \\\"EnumerableMap: nonexistent key\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {_get}, with a custom error message when `key` is not in the map.\\n     */\\n    function _get(\\n        Map storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) private view returns (uint256) {\\n        uint256 keyIndex = map._indexes[key];\\n        require(keyIndex != 0, errorMessage); // Equivalent to contains(map, key)\\n        return map._entries[keyIndex - 1]._value; // All indexes are 1-based\\n    }\\n\\n    // UintToUintMap\\n\\n    struct UintToUintMap {\\n        Map _inner;\\n    }\\n\\n    /**\\n     * @dev Adds a key-value pair to a map, or updates the value for an existing\\n     * key. O(1).\\n     *\\n     * Returns true if the key was added to the map, that is if it was not\\n     * already present.\\n     */\\n    function set(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        uint256 value\\n    ) internal returns (bool) {\\n        return _set(map._inner, key, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the key was removed from the map, that is if it was present.\\n     */\\n    function remove(UintToUintMap storage map, uint256 key)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns true if the key is in the map. O(1).\\n     */\\n    function contains(UintToUintMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Returns the number of elements in the map. O(1).\\n     */\\n    function length(UintToUintMap storage map) internal view returns (uint256) {\\n        return _length(map._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the element stored at position `index` in the set. O(1).\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintToUintMap storage map, uint256 index)\\n        internal\\n        view\\n        returns (uint256, uint256)\\n    {\\n        return _at(map._inner, index);\\n    }\\n\\n    /**\\n     * @dev Returns the value associated with `key`.  O(1).\\n     *\\n     * Requirements:\\n     *\\n     * - `key` must be in the map.\\n     */\\n    function get(UintToUintMap storage map, uint256 key)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return _get(map._inner, key);\\n    }\\n\\n    /**\\n     * @dev Same as {get}, with a custom error message when `key` is not in the map.\\n     */\\n    function get(\\n        UintToUintMap storage map,\\n        uint256 key,\\n        string memory errorMessage\\n    ) internal view returns (uint256) {\\n        return _get(map._inner, key, errorMessage);\\n    }\\n}\",\"keccak256\":\"0x2d35e8d069cba1035d1f3269fcba8087a4b113b8598b3acd26b81e6c02864ab8\"},\"contracts/libraries/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity =0.6.6;\\n\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value)\\n        private\\n        view\\n        returns (bool)\\n    {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index)\\n        private\\n        view\\n        returns (bytes32)\\n    {\\n        require(\\n            set._values.length > index,\\n            \\\"EnumerableSet: index out of bounds\\\"\\n        );\\n        return set._values[index];\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _add(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(uint256(value)));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (address)\\n    {\\n        return address(uint256(_at(set._inner, index)));\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value)\\n        internal\\n        returns (bool)\\n    {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value)\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0xf1efe1fb497fe7a09f5238f294de1085e2658a1fca3912a2312eed7dfe254aed\"},\"contracts/libraries/TradeHelper.sol\":{\"content\":\"pragma solidity =0.6.6;\\n\\n// import \\\"@openzeppelin/contracts/token/ERC20/SafeERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n// import \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\n// import \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\n// import \\\"./EnumerableMap.sol\\\";\\n// import \\\"./EnumerableSet.sol\\\";\\n// import \\\"./BidHelper.sol\\\";\\n\\n\\n\\nimport \\\"../openzeppelin/token/ERC20/SafeERC20Upgradeable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC20/IERC20Upgradeable.sol\\\";\\nimport \\\"../openzeppelin/token/ERC721/IERC721Upgradeable.sol\\\";\\nimport \\\"../openzeppelin/math/SafeMathUpgradeable.sol\\\";\\nimport \\\"./EnumerableMap.sol\\\";\\nimport \\\"./EnumerableSet.sol\\\";\\n// import \\\"../openzeppelin/utils/EnumerableMapUpgradeable.sol\\\";\\n// import \\\"../openzeppelin/utils/EnumerableSetUpgradeable.sol\\\";\\nimport \\\"./BidHelper.sol\\\";\\n\\n\\n\\nlibrary TradeHelper {\\n    using SafeMathUpgradeable for uint256;\\n    using EnumerableMap for EnumerableMap.UintToUintMap;\\n    using EnumerableSet for EnumerableSet.UintSet;\\n    using SafeERC20Upgradeable for IERC20Upgradeable;\\n\\n    event Bid(\\n        address indexed bidder,\\n        uint256 indexed tokenId,\\n        uint256 price,\\n        address quoteTokenAddr,\\n        uint256 timestamp\\n    );\\n\\n    event CancelBidToken(address indexed bidder, uint256 indexed tokenId, uint256 timestamp);\\n\\n    function updateBidPrice(\\n        address _sender,\\n        EnumerableMap.UintToUintMap storage _endTimeMap,\\n        uint256 _tokenId,\\n        uint256 _price,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids        \\n    ) public {\\n        require(\\n            _userBids[_sender].contains(_tokenId),\\n            \\\"Only Bidder can update the bid price\\\"\\n        );\\n        //require (_price <=  _asksMap.get(_tokenId), \\\"Offer must be less than sell price\\\");\\n        require(_price != 0, \\\"Price must be granter than zero\\\");\\n        address _to = _sender; // find  bid and the index\\n        (BidHelper.BidEntry memory bidEntry, uint256 _index) =\\n            BidHelper.getBidByTokenIdAndAddress(_tokenBids, _tokenId, _to);\\n        require(bidEntry.price != 0, \\\"Bidder does not exist\\\");\\n        require(bidEntry.price != _price, \\\"The bid price cannot be the same\\\");\\n        require(_endTimeMap.get(_tokenId) > now, \\\"The end time have passed\\\");\\n        if (_price > bidEntry.price) {\\n            IERC20Upgradeable(bidEntry.quoteTokenAddr).safeTransferFrom(\\n                address(_sender),\\n                address(this),\\n                _price - bidEntry.price\\n            );\\n        } else {\\n            IERC20Upgradeable(bidEntry.quoteTokenAddr).transfer(\\n                _to,\\n                bidEntry.price - _price\\n            );\\n        }\\n        _userBids[_to].set(_tokenId, _price);\\n        _tokenBids[_tokenId][_index] = BidHelper.BidEntry({\\n            bidder: _to,\\n            price: _price,\\n            quoteTokenAddr: bidEntry.quoteTokenAddr,\\n            timestamp: now\\n        });\\n        emit Bid(_sender, _tokenId, _price, bidEntry.quoteTokenAddr, now);\\n    }\\n\\n    function delBidByTokenIdAndIndex(\\n        uint256 _tokenId,\\n        uint256 _index,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids\\n    ) public {\\n        _userBids[_tokenBids[_tokenId][_index].bidder].remove(_tokenId);\\n        // delete the bid\\n        uint256 len = _tokenBids[_tokenId].length;\\n        for (uint256 i = _index; i < len - 1; i++) {\\n            _tokenBids[_tokenId][i] = _tokenBids[_tokenId][i + 1];\\n        }\\n        _tokenBids[_tokenId].pop();\\n    }\\n\\n    function cancelBidToken(\\n        address _sender,\\n        uint256 _tokenId,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids\\n    ) public {\\n        require(\\n            _userBids[_sender].contains(_tokenId),\\n            \\\"Only Bidder can cancel the bid\\\"\\n        );\\n        // find  bid and the index\\n        (BidHelper.BidEntry memory bidEntry, uint256 _index) =\\n            BidHelper.getBidByTokenIdAndAddress(_tokenBids, _tokenId, _sender);\\n        require(bidEntry.price != 0, \\\"Bidder does not exist\\\");\\n        IERC20Upgradeable(bidEntry.quoteTokenAddr).transfer(_sender, bidEntry.price);\\n        delBidByTokenIdAndIndex(_tokenId, _index, _tokenBids, _userBids);\\n        emit CancelBidToken(_sender, _tokenId, now);\\n    }\\n\\n    function bidToken(\\n        address _sender,\\n        address _contract,\\n        EnumerableMap.UintToUintMap storage _asksMap,\\n        EnumerableMap.UintToUintMap storage _endTimeMap,\\n        mapping(address => EnumerableMap.UintToUintMap) storage _userBids,\\n        mapping(uint256 => BidHelper.BidEntry[]) storage _tokenBids,\\n        mapping(uint256 => address) storage _asksQuoteTokens,\\n        mapping(uint256 => address) storage _tokenSellers,\\n        uint256 _tokenId,\\n        uint256 _price\\n    ) public {\\n        require(\\n            _sender != address(0) && _sender != _contract,\\n            \\\"Wrong msg sender\\\"\\n        );\\n        //require (_price <=  _asksMap.get(_tokenId), \\\"Offer must be less than sell price\\\");\\n        require(_price != 0, \\\"Price must be granter than zero\\\");\\n        require(_asksMap.contains(_tokenId), \\\"Token not in sell book\\\");\\n        address _seller = _tokenSellers[_tokenId];\\n        address _to = address(_sender);\\n        require(_seller != _to, \\\"Owner cannot bid\\\");\\n        require(!_userBids[_to].contains(_tokenId), \\\"Bidder already exists\\\");\\n        require(_endTimeMap.get(_tokenId) > now, \\\"The end time have passed\\\");\\n\\n        address quoteTokenAddr = _asksQuoteTokens[_tokenId];\\n        IERC20Upgradeable(quoteTokenAddr).safeTransferFrom(_sender, _contract, _price);\\n        _userBids[_to].set(_tokenId, _price);\\n        _tokenBids[_tokenId].push(\\n            BidHelper.BidEntry({\\n                bidder: _to,\\n                price: _price,\\n                quoteTokenAddr: quoteTokenAddr,\\n                timestamp: now\\n            })\\n        );\\n        emit Bid(_sender, _tokenId, _price, quoteTokenAddr, now);\\n    }\\n\\n    function trasnferSellMoney(\\n        address _creator,\\n        address _seller,\\n        uint256 _price,\\n        uint256 _feeAmount,\\n        uint256 _feeToOwnerAmount,\\n        address _feeAddr,\\n        address _quoteTokenAddr\\n    ) public {\\n        if (_feeAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).transfer(_feeAddr, _feeAmount);\\n        }\\n        if (_feeToOwnerAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).transfer(_creator, _feeToOwnerAmount);\\n        }\\n        IERC20Upgradeable(_quoteTokenAddr).transfer(\\n            _seller,\\n            _price.sub(_feeAmount).sub(_feeToOwnerAmount)\\n        );\\n    }\\n\\n    function transferBuyMoney(\\n        address _buyer,\\n        address _creator,\\n        address _seller,\\n        uint256 _price,\\n        uint256 _feeAmount,\\n        uint256 _feeToOwnerAmount,\\n        address _feeAddr,\\n        address _quoteTokenAddr\\n    ) public {\\n        if (_feeAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).safeTransferFrom(\\n                _buyer,\\n                _feeAddr,\\n                _feeAmount\\n            );\\n        }\\n        if (_feeToOwnerAmount != 0) {\\n            IERC20Upgradeable(_quoteTokenAddr).safeTransferFrom(\\n                _buyer,\\n                _creator,\\n                _feeToOwnerAmount\\n            );\\n        }\\n        IERC20Upgradeable(_quoteTokenAddr).safeTransferFrom(\\n            _buyer,\\n            _seller,\\n            _price.sub(_feeAmount).sub(_feeToOwnerAmount)\\n        );\\n    }\\n}\",\"keccak256\":\"0x90e5347e4dd6dbf44621a0373c0247051f45cbc68bb68a66f4f8fa69b5397bd4\"},\"contracts/openzeppelin/introspection/IERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165Upgradeable {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\",\"keccak256\":\"0x0ccce89d8a8258332a2a6f415b550cc67d6b5d7ab87342ea78c643deee4168f6\"},\"contracts/openzeppelin/math/SafeMathUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMathUpgradeable {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return sub(a, b, \\\"SafeMath: subtraction overflow\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        uint256 c = a - b;\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return div(a, b, \\\"SafeMath: division by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers. Reverts with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        uint256 c = a / b;\\n        // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return mod(a, b, \\\"SafeMath: modulo by zero\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * Reverts with custom message when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b != 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x0a0b5ce8001acd3ada4ff669d8c0411395c687806b1e007180470be00f7f74cf\"},\"contracts/openzeppelin/token/ERC20/IERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20Upgradeable {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xbdf7877e9bd826f5f948745a97d97dc459b8d8d41d5c4d3902f7d5c10d201a10\"},\"contracts/openzeppelin/token/ERC20/SafeERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nimport \\\"./IERC20Upgradeable.sol\\\";\\nimport \\\"../../math/SafeMathUpgradeable.sol\\\";\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20Upgradeable {\\n    using SafeMathUpgradeable for uint256;\\n    using AddressUpgradeable for address;\\n\\n    function safeTransfer(IERC20Upgradeable token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20Upgradeable token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).add(value);\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20Upgradeable token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender).sub(value, \\\"SafeERC20: decreased allowance below zero\\\");\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20Upgradeable token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x04428d4a4c656a7da19192a8e6ec69f61880d28280582b606b647bbe464030a5\"},\"contracts/openzeppelin/token/ERC721/IERC721Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.6.6;\\n\\nimport \\\"../../introspection/IERC165Upgradeable.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721Upgradeable is IERC165Upgradeable {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n      * @dev Safely transfers `tokenId` token from `from` to `to`.\\n      *\\n      * Requirements:\\n      *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n      * - `tokenId` token must exist and be owned by `from`.\\n      * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n      * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n      *\\n      * Emits a {Transfer} event.\\n      */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n}\",\"keccak256\":\"0x461f20d06d82f3db21004e5c0c78335714fe096af5df97519ae01a1810a31486\"},\"contracts/openzeppelin/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity =0.6.6;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0x0645931dcc414b28a7e7722f4352d3857b4167edd48f82f2fe208419edc8fa93\"}},\"version\":1}",
  "bytecode": "0x6118a2610026600b82828239805160001a60731461001957fe5b30600052607381538281f3fe730000000000000000000000000000000000000000301460806040526004361061006c5760003560e01c806309e66ac8146100715780630fbffb22146100d957806316e5c2d6146101385780634d45d4fb1461018957806350c63361146101c557806395bcd89614610235575b600080fd5b81801561007d57600080fd5b506100d7600480360361010081101561009557600080fd5b506001600160a01b0381358116916020810135821691604082013581169160608101359160808201359160a08101359160c082013581169160e001351661027a565b005b8180156100e557600080fd5b506100d7600480360360e08110156100fc57600080fd5b506001600160a01b038135811691602081013582169160408201359160608101359160808201359160a081013582169160c09091013516610303565b81801561014457600080fd5b506100d7600480360360c081101561015b57600080fd5b506001600160a01b038135169060208101359060408101359060608101359060808101359060a001356104d1565b81801561019557600080fd5b506100d7600480360360808110156101ac57600080fd5b5080359060208101359060408101359060600135610899565b8180156101d157600080fd5b506100d760048036036101408110156101e957600080fd5b506001600160a01b03813581169160208101359091169060408101359060608101359060808101359060a08101359060c08101359060e081013590610100810135906101200135610a13565b81801561024157600080fd5b506100d76004803603608081101561025857600080fd5b506001600160a01b038135169060208101359060408101359060600135610e08565b831561029b5761029b6001600160a01b03821689848763ffffffff610fc516565b82156102bc576102bc6001600160a01b03821689898663ffffffff610fc516565b6102f988876102e1866102d58a8a63ffffffff61102516565b9063ffffffff61102516565b6001600160a01b03851692919063ffffffff610fc516565b5050505050505050565b831561039657806001600160a01b031663a9059cbb83866040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561036957600080fd5b505af115801561037d573d6000803e3d6000fd5b505050506040513d602081101561039357600080fd5b50505b821561042957806001600160a01b031663a9059cbb88856040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b1580156103fc57600080fd5b505af1158015610410573d6000803e3d6000fd5b505050506040513d602081101561042657600080fd5b50505b6001600160a01b03811663a9059cbb8761044d866102d58a8a63ffffffff61102516565b6040518363ffffffff1660e01b815260040180836001600160a01b03166001600160a01b0316815260200182815260200192505050602060405180830381600087803b15801561049c57600080fd5b505af11580156104b0573d6000803e3d6000fd5b505050506040513d60208110156104c657600080fd5b505050505050505050565b6001600160a01b03861660009081526020839052604090206104f9908563ffffffff61107016565b6105345760405162461bcd60e51b815260040180806020018281038252602481526020018061181f6024913960400191505060405180910390fd5b82610586576040805162461bcd60e51b815260206004820152601f60248201527f5072696365206d757374206265206772616e746572207468616e207a65726f00604482015290519081900360640190fd5b8561058f6117be565b600061059c84888561107c565b915091508160200151600014156105f2576040805162461bcd60e51b8152602060048201526015602482015274109a5919195c88191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b858260200151141561064b576040805162461bcd60e51b815260206004820181905260248201527f546865206269642070726963652063616e6e6f74206265207468652073616d65604482015290519081900360640190fd5b4261065c898963ffffffff61120f16565b116106a9576040805162461bcd60e51b8152602060048201526018602482015277151a1948195b99081d1a5b59481a185d99481c185cdcd95960421b604482015290519081900360640190fd5b81602001518611156106e4576106df89308460200151890385604001516001600160a01b0316610fc5909392919063ffffffff16565b61076a565b604080830151602080850151835163a9059cbb60e01b81526001600160a01b038881166004830152918b90036024820152935192169263a9059cbb92604480830193928290030181600087803b15801561073d57600080fd5b505af1158015610751573d6000803e3d6000fd5b505050506040513d602081101561076757600080fd5b50505b6001600160a01b038316600090815260208690526040902061079390888863ffffffff61121b16565b506040518060800160405280846001600160a01b0316815260200187815260200183604001516001600160a01b031681526020014281525084600089815260200190815260200160002082815481106107e857fe5b6000918252602091829020835160049092020180546001600160a01b039283166001600160a01b031991821617825584840151600183015560408086015160028401805491861691909316179091556060948501516003909201919091558581015181518b8152908316938101939093524283820152518a93918d16927f462e4b96cd891651a4c5c631c8689db7b4e0e768170532986bed661423beaba592908290030190a3505050505050505050565b6108f28482600085600089815260200190815260200160002087815481106108bd57fe5b600091825260208083206004909202909101546001600160a01b0316835282019290925260400190209063ffffffff61123216565b50600084815260208390526040902054835b600182038110156109b757600086815260208590526040902080546001830190811061092c57fe5b9060005260206000209060040201846000888152602001908152602001600020828154811061095757fe5b60009182526020909120825460049092020180546001600160a01b03199081166001600160a01b03938416178255600180850154818401556002808601549084018054909316941693909317905560039283015492019190915501610904565b5060008581526020849052604090208054806109cf57fe5b60008281526020812060046000199093019283020180546001600160a01b031990811682556001820183905560028201805490911690556003015590555050505050565b6001600160a01b038a1615801590610a3d5750886001600160a01b03168a6001600160a01b031614155b610a81576040805162461bcd60e51b815260206004820152601060248201526f2bb937b7339036b9b39039b2b73232b960811b604482015290519081900360640190fd5b80610ad3576040805162461bcd60e51b815260206004820152601f60248201527f5072696365206d757374206265206772616e746572207468616e207a65726f00604482015290519081900360640190fd5b610ae3888363ffffffff61107016565b610b2d576040805162461bcd60e51b8152602060048201526016602482015275546f6b656e206e6f7420696e2073656c6c20626f6f6b60501b604482015290519081900360640190fd5b6000828152602084905260409020546001600160a01b03908116908b908116821415610b93576040805162461bcd60e51b815260206004820152601060248201526f13dddb995c8818d85b9b9bdd08189a5960821b604482015290519081900360640190fd5b6001600160a01b0381166000908152602089905260409020610bbb908563ffffffff61107016565b15610c05576040805162461bcd60e51b815260206004820152601560248201527442696464657220616c72656164792065786973747360581b604482015290519081900360640190fd5b42610c168a8663ffffffff61120f16565b11610c63576040805162461bcd60e51b8152602060048201526018602482015277151a1948195b99081d1a5b59481a185d99481c185cdcd95960421b604482015290519081900360640190fd5b6000848152602087905260409020546001600160a01b0316610c8d818e8e8763ffffffff610fc516565b6001600160a01b038216600090815260208a905260409020610cb690868663ffffffff61121b16565b508760008681526020019081526020016000206040518060800160405280846001600160a01b03168152602001868152602001836001600160a01b0316815260200142815250908060018154018082558091505060019003906000526020600020906004020160009091909190915060008201518160000160006101000a8154816001600160a01b0302191690836001600160a01b031602179055506020820151816001015560408201518160020160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550606082015181600301555050848d6001600160a01b03167f462e4b96cd891651a4c5c631c8689db7b4e0e768170532986bed661423beaba586844260405180848152602001836001600160a01b03166001600160a01b03168152602001828152602001935050505060405180910390a350505050505050505050505050565b6001600160a01b0384166000908152602082905260409020610e30908463ffffffff61107016565b610e81576040805162461bcd60e51b815260206004820152601e60248201527f4f6e6c79204269646465722063616e2063616e63656c20746865206269640000604482015290519081900360640190fd5b610e896117be565b6000610e9684868861107c565b91509150816020015160001415610eec576040805162461bcd60e51b8152602060048201526015602482015274109a5919195c88191bd95cc81b9bdd08195e1a5cdd605a1b604482015290519081900360640190fd5b604080830151602080850151835163a9059cbb60e01b81526001600160a01b038b811660048301526024820192909252935192169263a9059cbb92604480830193928290030181600087803b158015610f4457600080fd5b505af1158015610f58573d6000803e3d6000fd5b505050506040513d6020811015610f6e57600080fd5b50610f7d905085828686610899565b60408051428152905186916001600160a01b038916917f817f285b0b0714d8a60aeee72392b9aa5fb11bb6e7f8687d7a582b87091dc30c9181900360200190a3505050505050565b604080516001600160a01b0380861660248301528416604482015260648082018490528251808303909101815260849091019091526020810180516001600160e01b03166323b872dd60e01b17905261101f90859061123e565b50505050565b600061106783836040518060400160405280601e81526020017f536166654d6174683a207375627472616374696f6e206f766572666c6f7700008152506112f4565b90505b92915050565b6000611067838361138b565b6110846117be565b6000838152602085815260408083208054825181850281018501909352808352606093859084015b8282101561110e576000848152602090819020604080516080810182526004860290920180546001600160a01b0390811684526001808301548587015260028301549091169284019290925260030154606083015290835290920191016110ac565b50505050905060008151905060006111246117be565b60005b838110156112015784818151811061113b57fe5b6020026020010151600001516001600160a01b0316886001600160a01b031614156111f957809250604051806080016040528086838151811061117a57fe5b6020026020010151600001516001600160a01b031681526020018683815181106111a057fe5b60200260200101516020015181526020018683815181106111bd57fe5b6020026020010151604001516001600160a01b031681526020018683815181106111e357fe5b6020026020010151606001518152509150611201565b600101611127565b509890975095505050505050565b600061106783836113a3565b60006112288484846113e5565b90505b9392505050565b6000611067838361147c565b6060611293826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661155a9092919063ffffffff16565b8051909150156112ef578080602001905160208110156112b257600080fd5b50516112ef5760405162461bcd60e51b815260040180806020018281038252602a815260200180611843602a913960400191505060405180910390fd5b505050565b600081848411156113835760405162461bcd60e51b81526004018080602001828103825283818151815260200191508051906020019080838360005b83811015611348578181015183820152602001611330565b50505050905090810190601f1680156113755780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b505050900390565b60009081526001919091016020526040902054151590565b600061106783836040518060400160405280601e81526020017f456e756d657261626c654d61703a206e6f6e6578697374656e74206b65790000815250611569565b60008281526001840160205260408120548061144a57505060408051808201825283815260208082018481528654600181810189556000898152848120955160029093029095019182559151908201558654868452818801909252929091205561122b565b8285600001600183038154811061145d57fe5b906000526020600020906002020160010181905550600091505061122b565b6000818152600183016020526040812054801561155057835460001980830191908101906000908790839081106114af57fe5b90600052602060002090600202019050808760000184815481106114cf57fe5b60009182526020808320845460029093020191825560019384015491840191909155835482528983019052604090209084019055865487908061150e57fe5b600082815260208082206002600019909401938402018281556001908101839055929093558881528982019092526040822091909155945061106a9350505050565b600091505061106a565b606061122884846000856115f6565b600082815260018401602052604081205482816115c75760405162461bcd60e51b8152602060048201818152835160248401528351909283926044909101919085019080838360008315611348578181015183820152602001611330565b508460000160018203815481106115da57fe5b9060005260206000209060020201600101549150509392505050565b6060824710156116375760405162461bcd60e51b81526004018080602001828103825260268152602001806117f96026913960400191505060405180910390fd5b61164085611752565b611691576040805162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015290519081900360640190fd5b60006060866001600160a01b031685876040518082805190602001908083835b602083106116d05780518252601f1990920191602091820191016116b1565b6001836020036101000a03801982511681845116808217855250505050505090500191505060006040518083038185875af1925050503d8060008114611732576040519150601f19603f3d011682016040523d82523d6000602084013e611737565b606091505b5091509150611747828286611758565b979650505050505050565b3b151590565b6060831561176757508161122b565b8251156117775782518084602001fd5b60405162461bcd60e51b8152602060048201818152845160248401528451859391928392604401919085019080838360008315611348578181015183820152602001611330565b604051806080016040528060006001600160a01b031681526020016000815260200160006001600160a01b0316815260200160008152509056fe416464726573733a20696e73756666696369656e742062616c616e636520666f722063616c6c4f6e6c79204269646465722063616e2075706461746520746865206269642070726963655361666545524332303a204552433230206f7065726174696f6e20646964206e6f742073756363656564a2646970667358221220e1b93a40ac0167fcf538c220002773a0c43b0b2464edd69a4bd358257163882764736f6c63430006060033",
  "deployedBytecode": "",
  "devdoc": {
    "methods": {}
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}